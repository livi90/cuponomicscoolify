#!/usr/bin/env node

/**
 * Script de prueba para verificar todas las funcionalidades de b√∫squeda
 * Uso: node scripts/test-search-functionality.js
 */

const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'

async function testSearchFunctionality() {
  console.log('üîç Probando funcionalidades de b√∫squeda...\n')
  
  const tests = [
    {
      name: 'B√∫squeda de cupones',
      url: `${BASE_URL}/buscar-ofertas?search=descuento`,
      expected: 'deber√≠a devolver cupones con "descuento" en el t√≠tulo o descripci√≥n'
    },
    {
      name: 'B√∫squeda por tienda',
      url: `${BASE_URL}/buscar-ofertas?store=test-store-id`,
      expected: 'deber√≠a devolver cupones de la tienda espec√≠fica'
    },
    {
      name: 'B√∫squeda por categor√≠a',
      url: `${BASE_URL}/buscar-ofertas?category=tecnologia`,
      expected: 'deber√≠a devolver cupones de tiendas en la categor√≠a tecnolog√≠a'
    },
    {
      name: 'B√∫squeda por tipo de cup√≥n',
      url: `${BASE_URL}/buscar-ofertas?type=code`,
      expected: 'deber√≠a devolver solo cupones de tipo c√≥digo'
    },
    {
      name: 'Filtro por descuento m√≠nimo',
      url: `${BASE_URL}/buscar-ofertas?minDiscount=20`,
      expected: 'deber√≠a devolver cupones con descuento de 20% o m√°s'
    },
    {
      name: 'Filtro por calificaci√≥n',
      url: `${BASE_URL}/buscar-ofertas?minRating=4`,
      expected: 'deber√≠a devolver cupones con calificaci√≥n de 4+ estrellas'
    },
    {
      name: 'B√∫squeda con m√∫ltiples filtros',
      url: `${BASE_URL}/buscar-ofertas?search=oferta&type=deal&minDiscount=10`,
      expected: 'deber√≠a combinar b√∫squeda de texto con filtros'
    },
    {
      name: 'P√°gina de ofertas populares',
      url: `${BASE_URL}/ofertas-populares`,
      expected: 'deber√≠a mostrar ofertas populares sin errores'
    },
    {
      name: 'P√°gina de productos en oferta',
      url: `${BASE_URL}/productos-en-oferta`,
      expected: 'deber√≠a mostrar productos de outlet sin errores'
    }
  ]

  for (const test of tests) {
    try {
      console.log(`üß™ ${test.name}...`)
      const response = await fetch(test.url)
      
      if (response.ok) {
        const html = await response.text()
        
        // Verificar que la p√°gina carga correctamente
        if (html.includes('error') || html.includes('Error')) {
          console.log(`‚ùå ${test.name}: La p√°gina contiene errores`)
        } else if (html.includes('Cuponomics') || html.includes('cuponomics')) {
          console.log(`‚úÖ ${test.name}: P√°gina carga correctamente`)
        } else {
          console.log(`‚ö†Ô∏è ${test.name}: P√°gina carga pero contenido inesperado`)
        }
        
        // Verificar elementos espec√≠ficos seg√∫n el tipo de b√∫squeda
        if (test.name.includes('cupones') && html.includes('cupones')) {
          console.log(`   ‚úÖ Contiene elementos de cupones`)
        }
        
        if (test.name.includes('productos') && html.includes('outlet')) {
          console.log(`   ‚úÖ Contiene elementos de productos outlet`)
        }
        
      } else {
        console.log(`‚ùå ${test.name}: Error HTTP ${response.status}`)
      }
      
    } catch (error) {
      console.log(`‚ùå ${test.name}: Error de conexi√≥n - ${error.message}`)
    }
    
    console.log('')
  }

  // Probar API de sugerencias
  console.log('üß™ Probando API de sugerencias...')
  try {
    const suggestionsResponse = await fetch(`${BASE_URL}/api/suggestions?q=test`)
    if (suggestionsResponse.ok) {
      const suggestions = await suggestionsResponse.json()
      console.log('‚úÖ API de sugerencias responde correctamente')
      console.log(`   Sugerencias encontradas: ${suggestions.length || 0}`)
    } else {
      console.log('‚ö†Ô∏è API de sugerencias no disponible o con error')
    }
  } catch (error) {
    console.log('‚ö†Ô∏è API de sugerencias no accesible')
  }

  console.log('')
  console.log('üéâ Pruebas de b√∫squeda completadas!')
}

// Ejecutar las pruebas
testSearchFunctionality() 
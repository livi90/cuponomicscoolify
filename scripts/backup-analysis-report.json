{
  "missing": {
    "tables": [
      {
        "name": "AS', 'SELECT INTO', 'ALTER TABLE'\n    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'\n    , 'CREATE VIEW', 'ALTER VIEW'\n    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'\n    , 'CREATE FUNCTION', 'ALTER FUNCTION'\n    , 'CREATE TRIGGER'\n    , 'CREATE TYPE', 'ALTER TYPE'\n    , 'CREATE RULE'\n    , 'COMMENT'\n    )\n    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp\n    AND cmd.schema_name is distinct from 'pg_temp'\n    THEN\n      NOTIFY pgrst, 'reload schema';\n    END IF;\n  END LOOP;\nEND; $$;\n\n\nALTER FUNCTION extensions.pgrst_ddl_watch",
        "definition": ") OWNER TO supabase_admin;\n\n--\n-- TOC entry 411 (class 1255 OID 16604)\n-- Name: pgrst_drop_watch(",
        "columns": []
      },
      {
        "name": "auth.audit_log_entries",
        "definition": "\n    instance_id uuid,\n    id uuid NOT NULL,\n    payload json,\n    created_at timestamp with time zone,\n    ip_address character varying(64) DEFAULT ''::character varying NOT NULL\n",
        "columns": [
          {
            "name": "instance_id",
            "type": "uuid"
          },
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "payload",
            "type": "json"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "ip_address",
            "type": "character"
          }
        ]
      },
      {
        "name": "auth.flow_state",
        "definition": "\n    id uuid NOT NULL,\n    user_id uuid,\n    auth_code text NOT NULL,\n    code_challenge_method auth.code_challenge_method NOT NULL,\n    code_challenge text NOT NULL,\n    provider_type text NOT NULL,\n    provider_access_token text,\n    provider_refresh_token text,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    authentication_method text NOT NULL,\n    auth_code_issued_at timestamp with time zone\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "user_id",
            "type": "uuid"
          },
          {
            "name": "auth_code",
            "type": "text"
          },
          {
            "name": "code_challenge_method",
            "type": "auth.code_challenge_method"
          },
          {
            "name": "code_challenge",
            "type": "text"
          },
          {
            "name": "provider_type",
            "type": "text"
          },
          {
            "name": "provider_access_token",
            "type": "text"
          },
          {
            "name": "provider_refresh_token",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "authentication_method",
            "type": "text"
          },
          {
            "name": "auth_code_issued_at",
            "type": "timestamp"
          }
        ]
      },
      {
        "name": "auth.identities",
        "definition": "\n    provider_id text NOT NULL,\n    user_id uuid NOT NULL,\n    identity_data jsonb NOT NULL,\n    provider text NOT NULL,\n    last_sign_in_at timestamp with time zone,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n",
        "columns": [
          {
            "name": "provider_id",
            "type": "text"
          },
          {
            "name": "user_id",
            "type": "uuid"
          },
          {
            "name": "identity_data",
            "type": "jsonb"
          },
          {
            "name": "provider",
            "type": "text"
          },
          {
            "name": "last_sign_in_at",
            "type": "timestamp"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "email",
            "type": "text"
          },
          {
            "name": "id",
            "type": "uuid"
          }
        ]
      },
      {
        "name": "auth.instances",
        "definition": "\n    id uuid NOT NULL,\n    uuid uuid,\n    raw_base_config text,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "uuid",
            "type": "uuid"
          },
          {
            "name": "raw_base_config",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          }
        ]
      },
      {
        "name": "auth.mfa_amr_claims",
        "definition": "\n    session_id uuid NOT NULL,\n    created_at timestamp with time zone NOT NULL,\n    updated_at timestamp with time zone NOT NULL,\n    authentication_method text NOT NULL,\n    id uuid NOT NULL\n",
        "columns": [
          {
            "name": "session_id",
            "type": "uuid"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "authentication_method",
            "type": "text"
          },
          {
            "name": "id",
            "type": "uuid"
          }
        ]
      },
      {
        "name": "auth.mfa_challenges",
        "definition": "\n    id uuid NOT NULL,\n    factor_id uuid NOT NULL,\n    created_at timestamp with time zone NOT NULL,\n    verified_at timestamp with time zone,\n    ip_address inet NOT NULL,\n    otp_code text,\n    web_authn_session_data jsonb\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "factor_id",
            "type": "uuid"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "verified_at",
            "type": "timestamp"
          },
          {
            "name": "ip_address",
            "type": "inet"
          },
          {
            "name": "otp_code",
            "type": "text"
          },
          {
            "name": "web_authn_session_data",
            "type": "jsonb"
          }
        ]
      },
      {
        "name": "auth.mfa_factors",
        "definition": "\n    id uuid NOT NULL,\n    user_id uuid NOT NULL,\n    friendly_name text,\n    factor_type auth.factor_type NOT NULL,\n    status auth.factor_status NOT NULL,\n    created_at timestamp with time zone NOT NULL,\n    updated_at timestamp with time zone NOT NULL,\n    secret text,\n    phone text,\n    last_challenged_at timestamp with time zone,\n    web_authn_credential jsonb,\n    web_authn_aaguid uuid\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "user_id",
            "type": "uuid"
          },
          {
            "name": "friendly_name",
            "type": "text"
          },
          {
            "name": "factor_type",
            "type": "auth.factor_type"
          },
          {
            "name": "status",
            "type": "auth.factor_status"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "secret",
            "type": "text"
          },
          {
            "name": "phone",
            "type": "text"
          },
          {
            "name": "last_challenged_at",
            "type": "timestamp"
          },
          {
            "name": "web_authn_credential",
            "type": "jsonb"
          },
          {
            "name": "web_authn_aaguid",
            "type": "uuid"
          }
        ]
      },
      {
        "name": "auth.one_time_tokens",
        "definition": "\n    id uuid NOT NULL,\n    user_id uuid NOT NULL,\n    token_type auth.one_time_token_type NOT NULL,\n    token_hash text NOT NULL,\n    relates_to text NOT NULL,\n    created_at timestamp without time zone DEFAULT now() NOT NULL,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0))\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "user_id",
            "type": "uuid"
          },
          {
            "name": "token_type",
            "type": "auth.one_time_token_type"
          },
          {
            "name": "token_hash",
            "type": "text"
          },
          {
            "name": "relates_to",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "CONSTRAINT",
            "type": "one_time_tokens_token_hash_check"
          }
        ]
      },
      {
        "name": "auth.refresh_tokens",
        "definition": "\n    instance_id uuid,\n    id bigint NOT NULL,\n    token character varying(255),\n    user_id character varying(255),\n    revoked boolean,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    parent character varying(255),\n    session_id uuid\n",
        "columns": [
          {
            "name": "instance_id",
            "type": "uuid"
          },
          {
            "name": "id",
            "type": "bigint"
          },
          {
            "name": "token",
            "type": "character"
          },
          {
            "name": "user_id",
            "type": "character"
          },
          {
            "name": "revoked",
            "type": "boolean"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "parent",
            "type": "character"
          },
          {
            "name": "session_id",
            "type": "uuid"
          }
        ]
      },
      {
        "name": "auth.saml_providers",
        "definition": "\n    id uuid NOT NULL,\n    sso_provider_id uuid NOT NULL,\n    entity_id text NOT NULL,\n    metadata_xml text NOT NULL,\n    metadata_url text,\n    attribute_mapping jsonb,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    name_id_format text,\n    CONSTRAINT \"entity_id not empty\" CHECK ((char_length(entity_id) > 0)),\n    CONSTRAINT \"metadata_url not empty\" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),\n    CONSTRAINT \"metadata_xml not empty\" CHECK ((char_length(metadata_xml) > 0))\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "sso_provider_id",
            "type": "uuid"
          },
          {
            "name": "entity_id",
            "type": "text"
          },
          {
            "name": "metadata_xml",
            "type": "text"
          },
          {
            "name": "metadata_url",
            "type": "text"
          },
          {
            "name": "attribute_mapping",
            "type": "jsonb"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "name_id_format",
            "type": "text"
          },
          {
            "name": "CONSTRAINT",
            "type": "\"entity_id"
          },
          {
            "name": "CONSTRAINT",
            "type": "\"metadata_url"
          },
          {
            "name": "CONSTRAINT",
            "type": "\"metadata_xml"
          }
        ]
      },
      {
        "name": "auth.saml_relay_states",
        "definition": "\n    id uuid NOT NULL,\n    sso_provider_id uuid NOT NULL,\n    request_id text NOT NULL,\n    for_email text,\n    redirect_to text,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    flow_state_id uuid,\n    CONSTRAINT \"request_id not empty\" CHECK ((char_length(request_id) > 0))\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "sso_provider_id",
            "type": "uuid"
          },
          {
            "name": "request_id",
            "type": "text"
          },
          {
            "name": "for_email",
            "type": "text"
          },
          {
            "name": "redirect_to",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "flow_state_id",
            "type": "uuid"
          },
          {
            "name": "CONSTRAINT",
            "type": "\"request_id"
          }
        ]
      },
      {
        "name": "auth.schema_migrations",
        "definition": "\n    version character varying(255) NOT NULL\n",
        "columns": [
          {
            "name": "version",
            "type": "character"
          }
        ]
      },
      {
        "name": "auth.sessions",
        "definition": "\n    id uuid NOT NULL,\n    user_id uuid NOT NULL,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    factor_id uuid,\n    aal auth.aal_level,\n    not_after timestamp with time zone,\n    refreshed_at timestamp without time zone,\n    user_agent text,\n    ip inet,\n    tag text\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "user_id",
            "type": "uuid"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "factor_id",
            "type": "uuid"
          },
          {
            "name": "aal",
            "type": "auth.aal_level"
          },
          {
            "name": "not_after",
            "type": "timestamp"
          },
          {
            "name": "refreshed_at",
            "type": "timestamp"
          },
          {
            "name": "user_agent",
            "type": "text"
          },
          {
            "name": "ip",
            "type": "inet"
          },
          {
            "name": "tag",
            "type": "text"
          }
        ]
      },
      {
        "name": "auth.sso_domains",
        "definition": "\n    id uuid NOT NULL,\n    sso_provider_id uuid NOT NULL,\n    domain text NOT NULL,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    CONSTRAINT \"domain not empty\" CHECK ((char_length(domain) > 0))\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "sso_provider_id",
            "type": "uuid"
          },
          {
            "name": "domain",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "CONSTRAINT",
            "type": "\"domain"
          }
        ]
      },
      {
        "name": "auth.sso_providers",
        "definition": "\n    id uuid NOT NULL,\n    resource_id text,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    CONSTRAINT \"resource_id not empty\" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "resource_id",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "CONSTRAINT",
            "type": "\"resource_id"
          }
        ]
      },
      {
        "name": "auth.users",
        "definition": "\n    instance_id uuid,\n    id uuid NOT NULL,\n    aud character varying(255),\n    role character varying(255),\n    email character varying(255),\n    encrypted_password character varying(255),\n    email_confirmed_at timestamp with time zone,\n    invited_at timestamp with time zone,\n    confirmation_token character varying(255),\n    confirmation_sent_at timestamp with time zone,\n    recovery_token character varying(255),\n    recovery_sent_at timestamp with time zone,\n    email_change_token_new character varying(255),\n    email_change character varying(255),\n    email_change_sent_at timestamp with time zone,\n    last_sign_in_at timestamp with time zone,\n    raw_app_meta_data jsonb,\n    raw_user_meta_data jsonb,\n    is_super_admin boolean,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    phone text DEFAULT NULL::character varying,\n    phone_confirmed_at timestamp with time zone,\n    phone_change text DEFAULT ''::character varying,\n    phone_change_token character varying(255) DEFAULT ''::character varying,\n    phone_change_sent_at timestamp with time zone,\n    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,\n    email_change_token_current character varying(255) DEFAULT ''::character varying,\n    email_change_confirm_status smallint DEFAULT 0,\n    banned_until timestamp with time zone,\n    reauthentication_token character varying(255) DEFAULT ''::character varying,\n    reauthentication_sent_at timestamp with time zone,\n    is_sso_user boolean DEFAULT false NOT NULL,\n    deleted_at timestamp with time zone,\n    is_anonymous boolean DEFAULT false NOT NULL,\n    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))\n",
        "columns": [
          {
            "name": "instance_id",
            "type": "uuid"
          },
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "aud",
            "type": "character"
          },
          {
            "name": "role",
            "type": "character"
          },
          {
            "name": "email",
            "type": "character"
          },
          {
            "name": "encrypted_password",
            "type": "character"
          },
          {
            "name": "email_confirmed_at",
            "type": "timestamp"
          },
          {
            "name": "invited_at",
            "type": "timestamp"
          },
          {
            "name": "confirmation_token",
            "type": "character"
          },
          {
            "name": "confirmation_sent_at",
            "type": "timestamp"
          },
          {
            "name": "recovery_token",
            "type": "character"
          },
          {
            "name": "recovery_sent_at",
            "type": "timestamp"
          },
          {
            "name": "email_change_token_new",
            "type": "character"
          },
          {
            "name": "email_change",
            "type": "character"
          },
          {
            "name": "email_change_sent_at",
            "type": "timestamp"
          },
          {
            "name": "last_sign_in_at",
            "type": "timestamp"
          },
          {
            "name": "raw_app_meta_data",
            "type": "jsonb"
          },
          {
            "name": "raw_user_meta_data",
            "type": "jsonb"
          },
          {
            "name": "is_super_admin",
            "type": "boolean"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "phone",
            "type": "text"
          },
          {
            "name": "phone_confirmed_at",
            "type": "timestamp"
          },
          {
            "name": "phone_change",
            "type": "text"
          },
          {
            "name": "phone_change_token",
            "type": "character"
          },
          {
            "name": "phone_change_sent_at",
            "type": "timestamp"
          },
          {
            "name": "confirmed_at",
            "type": "timestamp"
          },
          {
            "name": "email_change_token_current",
            "type": "character"
          },
          {
            "name": "email_change_confirm_status",
            "type": "smallint"
          },
          {
            "name": "banned_until",
            "type": "timestamp"
          },
          {
            "name": "reauthentication_token",
            "type": "character"
          },
          {
            "name": "reauthentication_sent_at",
            "type": "timestamp"
          },
          {
            "name": "is_sso_user",
            "type": "boolean"
          },
          {
            "name": "deleted_at",
            "type": "timestamp"
          },
          {
            "name": "is_anonymous",
            "type": "boolean"
          },
          {
            "name": "CONSTRAINT",
            "type": "users_email_change_confirm_status_check"
          }
        ]
      },
      {
        "name": "public.affiliate_tokens",
        "definition": "\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    store_id uuid,\n    store_domain text NOT NULL,\n    affiliate_url text NOT NULL,\n    cookies jsonb,\n    created_at timestamp with time zone DEFAULT now()\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "store_id",
            "type": "uuid"
          },
          {
            "name": "store_domain",
            "type": "text"
          },
          {
            "name": "affiliate_url",
            "type": "text"
          },
          {
            "name": "cookies",
            "type": "jsonb"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          }
        ]
      },
      {
        "name": "public.banner_stats",
        "definition": "\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    banner_id uuid,\n    views integer DEFAULT 0 NOT NULL,\n    clicks integer DEFAULT 0 NOT NULL,\n    date date DEFAULT CURRENT_DATE NOT NULL\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "banner_id",
            "type": "uuid"
          },
          {
            "name": "views",
            "type": "integer"
          },
          {
            "name": "clicks",
            "type": "integer"
          },
          {
            "name": "date",
            "type": "date"
          }
        ]
      },
      {
        "name": "public.banners",
        "definition": "\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    title text,\n    image_url text NOT NULL,\n    link_url text,\n    brand_id uuid,\n    start_date timestamp with time zone,\n    end_date timestamp with time zone,\n    is_active boolean DEFAULT true NOT NULL,\n    \"position\" text DEFAULT 'top'::text,\n    created_at timestamp with time zone DEFAULT now(),\n    updated_at timestamp with time zone DEFAULT now()\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "title",
            "type": "text"
          },
          {
            "name": "image_url",
            "type": "text"
          },
          {
            "name": "link_url",
            "type": "text"
          },
          {
            "name": "brand_id",
            "type": "uuid"
          },
          {
            "name": "start_date",
            "type": "timestamp"
          },
          {
            "name": "end_date",
            "type": "timestamp"
          },
          {
            "name": "is_active",
            "type": "boolean"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          }
        ]
      },
      {
        "name": "public.brands",
        "definition": "\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    name text NOT NULL,\n    logo_url text,\n    website text\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "name",
            "type": "text"
          },
          {
            "name": "logo_url",
            "type": "text"
          },
          {
            "name": "website",
            "type": "text"
          }
        ]
      },
      {
        "name": "public.categories",
        "definition": "\n    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,\n    name text NOT NULL,\n    slug text NOT NULL,\n    description text,\n    parent_id uuid,\n    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "name",
            "type": "text"
          },
          {
            "name": "slug",
            "type": "text"
          },
          {
            "name": "description",
            "type": "text"
          },
          {
            "name": "parent_id",
            "type": "uuid"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          }
        ]
      },
      {
        "name": "public.coupon_stats",
        "definition": "\n    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,\n    coupon_id uuid NOT NULL,\n    views integer DEFAULT 0,\n    clicks integer DEFAULT 0,\n    conversions integer DEFAULT 0,\n    last_updated timestamp with time zone DEFAULT CURRENT_TIMESTAMP\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "coupon_id",
            "type": "uuid"
          },
          {
            "name": "views",
            "type": "integer"
          },
          {
            "name": "clicks",
            "type": "integer"
          },
          {
            "name": "conversions",
            "type": "integer"
          },
          {
            "name": "last_updated",
            "type": "timestamp"
          }
        ]
      },
      {
        "name": "public.coupons",
        "definition": "\n    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,\n    store_id uuid NOT NULL,\n    title text NOT NULL,\n    description text,\n    code text,\n    discount_value numeric,\n    discount_type text,\n    start_date timestamp with time zone,\n    expiry_date timestamp with time zone,\n    terms_conditions text,\n    coupon_type text NOT NULL,\n    is_verified boolean DEFAULT false,\n    is_active boolean DEFAULT true,\n    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,\n    coupon_url text,\n    coupon_category text,\n    CONSTRAINT coupons_coupon_type_check CHECK ((coupon_type = ANY (ARRAY['code'::text, 'deal'::text, 'free_shipping'::text]))),\n    CONSTRAINT coupons_discount_type_check CHECK ((discount_type = ANY (ARRAY['percentage'::text, 'fixed'::text, 'free_shipping'::text, 'bogo'::text, 'other'::text])))\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "store_id",
            "type": "uuid"
          },
          {
            "name": "title",
            "type": "text"
          },
          {
            "name": "description",
            "type": "text"
          },
          {
            "name": "code",
            "type": "text"
          },
          {
            "name": "discount_value",
            "type": "numeric"
          },
          {
            "name": "discount_type",
            "type": "text"
          },
          {
            "name": "start_date",
            "type": "timestamp"
          },
          {
            "name": "expiry_date",
            "type": "timestamp"
          },
          {
            "name": "terms_conditions",
            "type": "text"
          },
          {
            "name": "coupon_type",
            "type": "text"
          },
          {
            "name": "is_verified",
            "type": "boolean"
          },
          {
            "name": "is_active",
            "type": "boolean"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "coupon_url",
            "type": "text"
          },
          {
            "name": "coupon_category",
            "type": "text"
          },
          {
            "name": "CONSTRAINT",
            "type": "coupons_coupon_type_check"
          },
          {
            "name": "CONSTRAINT",
            "type": "coupons_discount_type_check"
          }
        ]
      },
      {
        "name": "public.notifications",
        "definition": "\n    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,\n    user_id uuid NOT NULL,\n    title text NOT NULL,\n    message text NOT NULL,\n    type text NOT NULL,\n    read boolean DEFAULT false,\n    data jsonb,\n    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "user_id",
            "type": "uuid"
          },
          {
            "name": "title",
            "type": "text"
          },
          {
            "name": "message",
            "type": "text"
          },
          {
            "name": "type",
            "type": "text"
          },
          {
            "name": "read",
            "type": "boolean"
          },
          {
            "name": "data",
            "type": "jsonb"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          }
        ]
      },
      {
        "name": "public.page_views",
        "definition": "\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    path text NOT NULL,\n    country text,\n    user_agent text,\n    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),\n    visitor_hash text\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "path",
            "type": "text"
          },
          {
            "name": "country",
            "type": "text"
          },
          {
            "name": "user_agent",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "visitor_hash",
            "type": "text"
          }
        ]
      },
      {
        "name": "public.payment_reminders",
        "definition": "\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    merchant_id uuid NOT NULL,\n    commission_amount numeric(10,2) NOT NULL,\n    period_start date NOT NULL,\n    period_end date NOT NULL,\n    due_date date NOT NULL,\n    status text DEFAULT 'pending'::text NOT NULL,\n    reminder_count integer DEFAULT 0,\n    last_reminder_sent timestamp with time zone,\n    payment_method text DEFAULT 'paypal'::text,\n    merchant_email text NOT NULL,\n    merchant_name text,\n    invoice_number text,\n    notes text,\n    created_at timestamp with time zone DEFAULT now(),\n    updated_at timestamp with time zone DEFAULT now(),\n    CONSTRAINT payment_reminders_payment_method_check CHECK ((payment_method = ANY (ARRAY['paypal'::text, 'stripe'::text, 'bank_transfer'::text]))),\n    CONSTRAINT payment_reminders_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'sent'::text, 'paid'::text, 'overdue'::text, 'cancelled'::text])))\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "merchant_id",
            "type": "uuid"
          },
          {
            "name": "commission_amount",
            "type": "numeric(10"
          },
          {
            "name": "period_start",
            "type": "date"
          },
          {
            "name": "period_end",
            "type": "date"
          },
          {
            "name": "due_date",
            "type": "date"
          },
          {
            "name": "status",
            "type": "text"
          },
          {
            "name": "reminder_count",
            "type": "integer"
          },
          {
            "name": "last_reminder_sent",
            "type": "timestamp"
          },
          {
            "name": "payment_method",
            "type": "text"
          },
          {
            "name": "merchant_email",
            "type": "text"
          },
          {
            "name": "merchant_name",
            "type": "text"
          },
          {
            "name": "invoice_number",
            "type": "text"
          },
          {
            "name": "notes",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "CONSTRAINT",
            "type": "payment_reminders_payment_method_check"
          },
          {
            "name": "CONSTRAINT",
            "type": "payment_reminders_status_check"
          }
        ]
      },
      {
        "name": "public.profiles",
        "definition": "\n    id uuid NOT NULL,\n    username text,\n    full_name text,\n    avatar_url text,\n    email text,\n    role text DEFAULT 'user'::text NOT NULL,\n    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,\n    CONSTRAINT profiles_role_check CHECK ((role = ANY (ARRAY['user'::text, 'merchant'::text, 'admin'::text])))\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "username",
            "type": "text"
          },
          {
            "name": "full_name",
            "type": "text"
          },
          {
            "name": "avatar_url",
            "type": "text"
          },
          {
            "name": "email",
            "type": "text"
          },
          {
            "name": "role",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "CONSTRAINT",
            "type": "profiles_role_check"
          }
        ]
      },
      {
        "name": "public.rating_comments",
        "definition": "\n    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,\n    rating_id uuid NOT NULL,\n    user_id uuid NOT NULL,\n    comment text NOT NULL,\n    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "rating_id",
            "type": "uuid"
          },
          {
            "name": "user_id",
            "type": "uuid"
          },
          {
            "name": "comment",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          }
        ]
      },
      {
        "name": "public.rating_votes",
        "definition": "\n    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,\n    rating_id uuid NOT NULL,\n    user_id uuid NOT NULL,\n    vote_type text NOT NULL,\n    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,\n    CONSTRAINT rating_votes_vote_type_check CHECK ((vote_type = ANY (ARRAY['like'::text, 'dislike'::text])))\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "rating_id",
            "type": "uuid"
          },
          {
            "name": "user_id",
            "type": "uuid"
          },
          {
            "name": "vote_type",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "CONSTRAINT",
            "type": "rating_votes_vote_type_check"
          }
        ]
      },
      {
        "name": "public.ratings",
        "definition": "\n    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,\n    user_id uuid NOT NULL,\n    coupon_id uuid NOT NULL,\n    rating integer NOT NULL,\n    worked boolean,\n    comment text,\n    amount_saved numeric,\n    screenshot_url text,\n    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,\n    CONSTRAINT ratings_rating_check CHECK (((rating >= 1) AND (rating <= 5)))\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "user_id",
            "type": "uuid"
          },
          {
            "name": "coupon_id",
            "type": "uuid"
          },
          {
            "name": "rating",
            "type": "integer"
          },
          {
            "name": "worked",
            "type": "boolean"
          },
          {
            "name": "comment",
            "type": "text"
          },
          {
            "name": "amount_saved",
            "type": "numeric"
          },
          {
            "name": "screenshot_url",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "CONSTRAINT",
            "type": "ratings_rating_check"
          }
        ]
      },
      {
        "name": "public.script_pings",
        "definition": "\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    store_id uuid,\n    tracking_script_id uuid NOT NULL,\n    ping_timestamp timestamp with time zone DEFAULT now(),\n    page_url text,\n    user_agent text,\n    ip_address inet,\n    script_version character varying(20),\n    platform_detected character varying(50),\n    created_at timestamp with time zone DEFAULT now()\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "store_id",
            "type": "uuid"
          },
          {
            "name": "tracking_script_id",
            "type": "uuid"
          },
          {
            "name": "ping_timestamp",
            "type": "timestamp"
          },
          {
            "name": "page_url",
            "type": "text"
          },
          {
            "name": "user_agent",
            "type": "text"
          },
          {
            "name": "ip_address",
            "type": "inet"
          },
          {
            "name": "script_version",
            "type": "character"
          },
          {
            "name": "platform_detected",
            "type": "character"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          }
        ]
      },
      {
        "name": "public.store_applications",
        "definition": "\n    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,\n    user_id uuid NOT NULL,\n    store_name text NOT NULL,\n    description text,\n    website text,\n    logo_url text,\n    category text,\n    contact_email text NOT NULL,\n    contact_phone text,\n    address text,\n    status text DEFAULT 'pending'::text NOT NULL,\n    admin_notes text,\n    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,\n    ecommerce_platform character varying(50),\n    is_exclusive_brand boolean,\n    commission numeric(4,2) DEFAULT 7.5,\n    accepted_terms boolean,\n    additional_info text,\n    business_type text,\n    contact_name text,\n    store_description text,\n    CONSTRAINT store_applications_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'approved'::text, 'rejected'::text])))\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "user_id",
            "type": "uuid"
          },
          {
            "name": "store_name",
            "type": "text"
          },
          {
            "name": "description",
            "type": "text"
          },
          {
            "name": "website",
            "type": "text"
          },
          {
            "name": "logo_url",
            "type": "text"
          },
          {
            "name": "category",
            "type": "text"
          },
          {
            "name": "contact_email",
            "type": "text"
          },
          {
            "name": "contact_phone",
            "type": "text"
          },
          {
            "name": "address",
            "type": "text"
          },
          {
            "name": "status",
            "type": "text"
          },
          {
            "name": "admin_notes",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "ecommerce_platform",
            "type": "character"
          },
          {
            "name": "is_exclusive_brand",
            "type": "boolean"
          },
          {
            "name": "commission",
            "type": "numeric(4"
          },
          {
            "name": "accepted_terms",
            "type": "boolean"
          },
          {
            "name": "additional_info",
            "type": "text"
          },
          {
            "name": "business_type",
            "type": "text"
          },
          {
            "name": "contact_name",
            "type": "text"
          },
          {
            "name": "store_description",
            "type": "text"
          },
          {
            "name": "CONSTRAINT",
            "type": "store_applications_status_check"
          }
        ]
      },
      {
        "name": "public.system_logs",
        "definition": "\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    message text NOT NULL,\n    created_at timestamp with time zone DEFAULT now()\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "message",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          }
        ]
      },
      {
        "name": "public.tracking_clicks",
        "definition": "\n    id bigint NOT NULL,\n    created_at timestamp with time zone DEFAULT now(),\n    updated_at timestamp with time zone DEFAULT now(),\n    user_id uuid,\n    session_id text,\n    utm_source text,\n    utm_medium text,\n    utm_campaign text,\n    utm_content text,\n    utm_term text,\n    store_id uuid,\n    store_name text,\n    coupon_code text,\n    coupon_id uuid,\n    category text,\n    discount_type text,\n    discount_value numeric(10,2),\n    affiliate_id text,\n    original_url text NOT NULL,\n    tracked_url text NOT NULL,\n    store_url text,\n    ip_address inet,\n    user_agent text,\n    referrer text,\n    device_type text,\n    clicked_at text,\n    CONSTRAINT valid_device_type CHECK (((device_type = ANY (ARRAY['mobile'::text, 'tablet'::text, 'desktop'::text, 'unknown'::text])) OR (device_type IS NULL))),\n    CONSTRAINT valid_discount_type CHECK (((discount_type = ANY (ARRAY['percentage'::text, 'fixed'::text, 'free_shipping'::text, 'bogo'::text, 'other'::text])) OR (discount_type IS NULL)))\n",
        "columns": [
          {
            "name": "id",
            "type": "bigint"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "user_id",
            "type": "uuid"
          },
          {
            "name": "session_id",
            "type": "text"
          },
          {
            "name": "utm_source",
            "type": "text"
          },
          {
            "name": "utm_medium",
            "type": "text"
          },
          {
            "name": "utm_campaign",
            "type": "text"
          },
          {
            "name": "utm_content",
            "type": "text"
          },
          {
            "name": "utm_term",
            "type": "text"
          },
          {
            "name": "store_id",
            "type": "uuid"
          },
          {
            "name": "store_name",
            "type": "text"
          },
          {
            "name": "coupon_code",
            "type": "text"
          },
          {
            "name": "coupon_id",
            "type": "uuid"
          },
          {
            "name": "category",
            "type": "text"
          },
          {
            "name": "discount_type",
            "type": "text"
          },
          {
            "name": "discount_value",
            "type": "numeric(10"
          },
          {
            "name": "affiliate_id",
            "type": "text"
          },
          {
            "name": "original_url",
            "type": "text"
          },
          {
            "name": "tracked_url",
            "type": "text"
          },
          {
            "name": "store_url",
            "type": "text"
          },
          {
            "name": "ip_address",
            "type": "inet"
          },
          {
            "name": "user_agent",
            "type": "text"
          },
          {
            "name": "referrer",
            "type": "text"
          },
          {
            "name": "device_type",
            "type": "text"
          },
          {
            "name": "clicked_at",
            "type": "text"
          },
          {
            "name": "CONSTRAINT",
            "type": "valid_device_type"
          },
          {
            "name": "CONSTRAINT",
            "type": "valid_discount_type"
          }
        ]
      },
      {
        "name": "public.tracking_conversions",
        "definition": "\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    owner_id uuid,\n    store_id uuid,\n    click_id bigint,\n    conversion_type character varying(50) DEFAULT 'purchase'::character varying,\n    conversion_value numeric(10,2) NOT NULL,\n    currency character varying(3) DEFAULT 'EUR'::character varying,\n    commission_rate numeric(5,2) DEFAULT 5.00,\n    commission_amount numeric(10,2) GENERATED ALWAYS AS (((conversion_value * commission_rate) / (100)::numeric)) STORED,\n    order_id character varying(255),\n    product_ids text[],\n    product_names text[],\n    quantity integer DEFAULT 1,\n    utm_source character varying(255),\n    utm_medium character varying(255),\n    utm_campaign character varying(255),\n    utm_content character varying(255),\n    utm_term character varying(255),\n    coupon_id uuid,\n    coupon_code character varying(100),\n    discount_applied numeric(10,2) DEFAULT 0,\n    session_id character varying(255),\n    user_agent text,\n    ip_address inet,\n    referrer text,\n    landing_page text,\n    platform character varying(50),\n    store_url text,\n    checkout_url text,\n    status character varying(20) DEFAULT 'pending'::character varying,\n    verified_at timestamp with time zone,\n    verification_method character varying(50),\n    customer_email character varying(255),\n    customer_id character varying(255),\n    is_new_customer boolean DEFAULT true,\n    converted_at timestamp with time zone DEFAULT now(),\n    created_at timestamp with time zone DEFAULT now(),\n    updated_at timestamp with time zone DEFAULT now()\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "owner_id",
            "type": "uuid"
          },
          {
            "name": "store_id",
            "type": "uuid"
          },
          {
            "name": "click_id",
            "type": "bigint"
          },
          {
            "name": "conversion_type",
            "type": "character"
          },
          {
            "name": "conversion_value",
            "type": "numeric(10"
          },
          {
            "name": "currency",
            "type": "character"
          },
          {
            "name": "commission_rate",
            "type": "numeric(5"
          },
          {
            "name": "commission_amount",
            "type": "numeric(10"
          },
          {
            "name": "order_id",
            "type": "character"
          },
          {
            "name": "product_ids",
            "type": "text[]"
          },
          {
            "name": "product_names",
            "type": "text[]"
          },
          {
            "name": "quantity",
            "type": "integer"
          },
          {
            "name": "utm_source",
            "type": "character"
          },
          {
            "name": "utm_medium",
            "type": "character"
          },
          {
            "name": "utm_campaign",
            "type": "character"
          },
          {
            "name": "utm_content",
            "type": "character"
          },
          {
            "name": "utm_term",
            "type": "character"
          },
          {
            "name": "coupon_id",
            "type": "uuid"
          },
          {
            "name": "coupon_code",
            "type": "character"
          },
          {
            "name": "discount_applied",
            "type": "numeric(10"
          },
          {
            "name": "session_id",
            "type": "character"
          },
          {
            "name": "user_agent",
            "type": "text"
          },
          {
            "name": "ip_address",
            "type": "inet"
          },
          {
            "name": "referrer",
            "type": "text"
          },
          {
            "name": "landing_page",
            "type": "text"
          },
          {
            "name": "platform",
            "type": "character"
          },
          {
            "name": "store_url",
            "type": "text"
          },
          {
            "name": "checkout_url",
            "type": "text"
          },
          {
            "name": "status",
            "type": "character"
          },
          {
            "name": "verified_at",
            "type": "timestamp"
          },
          {
            "name": "verification_method",
            "type": "character"
          },
          {
            "name": "customer_email",
            "type": "character"
          },
          {
            "name": "customer_id",
            "type": "character"
          },
          {
            "name": "is_new_customer",
            "type": "boolean"
          },
          {
            "name": "converted_at",
            "type": "timestamp"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          }
        ]
      },
      {
        "name": "public.tracking_pixels",
        "definition": "\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    owner_id uuid NOT NULL,\n    store_id uuid NOT NULL,\n    pixel_name character varying(255) NOT NULL,\n    pixel_id character varying(100) NOT NULL,\n    commission_rate numeric(5,2) DEFAULT 5.00,\n    currency character varying(3) DEFAULT 'EUR'::character varying,\n    track_all_pages boolean DEFAULT false,\n    checkout_pages text[] DEFAULT ARRAY['/checkout/success'::text, '/order-received'::text, '/thank-you'::text],\n    track_purchases boolean DEFAULT true,\n    track_leads boolean DEFAULT false,\n    track_signups boolean DEFAULT false,\n    allowed_domains text[],\n    webhook_url text,\n    is_active boolean DEFAULT true,\n    is_test_mode boolean DEFAULT false,\n    total_conversions integer DEFAULT 0,\n    total_revenue numeric(12,2) DEFAULT 0,\n    last_conversion_at timestamp with time zone,\n    created_at timestamp with time zone DEFAULT now(),\n    updated_at timestamp with time zone DEFAULT now(),\n    auto_detect_conversions boolean DEFAULT true,\n    checkout_patterns text[] DEFAULT ARRAY['/checkout/success'::text, '/order-received'::text, '/thank-you'::text, '/order-complete'::text],\n    is_verified boolean DEFAULT false,\n    platform character varying(50),\n    store_url text DEFAULT ''::text NOT NULL,\n    track_add_to_cart boolean DEFAULT false,\n    track_page_views boolean DEFAULT true,\n    last_activity_at timestamp with time zone,\n    total_commission numeric(12,2) DEFAULT 0\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "owner_id",
            "type": "uuid"
          },
          {
            "name": "store_id",
            "type": "uuid"
          },
          {
            "name": "pixel_name",
            "type": "character"
          },
          {
            "name": "pixel_id",
            "type": "character"
          },
          {
            "name": "commission_rate",
            "type": "numeric(5"
          },
          {
            "name": "currency",
            "type": "character"
          },
          {
            "name": "track_all_pages",
            "type": "boolean"
          },
          {
            "name": "checkout_pages",
            "type": "text[]"
          },
          {
            "name": "track_purchases",
            "type": "boolean"
          },
          {
            "name": "track_leads",
            "type": "boolean"
          },
          {
            "name": "track_signups",
            "type": "boolean"
          },
          {
            "name": "allowed_domains",
            "type": "text[]"
          },
          {
            "name": "webhook_url",
            "type": "text"
          },
          {
            "name": "is_active",
            "type": "boolean"
          },
          {
            "name": "is_test_mode",
            "type": "boolean"
          },
          {
            "name": "total_conversions",
            "type": "integer"
          },
          {
            "name": "total_revenue",
            "type": "numeric(12"
          },
          {
            "name": "last_conversion_at",
            "type": "timestamp"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "auto_detect_conversions",
            "type": "boolean"
          },
          {
            "name": "checkout_patterns",
            "type": "text[]"
          },
          {
            "name": "is_verified",
            "type": "boolean"
          },
          {
            "name": "platform",
            "type": "character"
          },
          {
            "name": "store_url",
            "type": "text"
          },
          {
            "name": "track_add_to_cart",
            "type": "boolean"
          },
          {
            "name": "track_page_views",
            "type": "boolean"
          },
          {
            "name": "last_activity_at",
            "type": "timestamp"
          },
          {
            "name": "total_commission",
            "type": "numeric(12"
          }
        ]
      },
      {
        "name": "public.utm_tracking_exceptions",
        "definition": "\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    store_id uuid,\n    store_name text NOT NULL,\n    domain text NOT NULL,\n    reason text,\n    is_active boolean DEFAULT true,\n    created_at timestamp with time zone DEFAULT now(),\n    updated_at timestamp with time zone DEFAULT now(),\n    owner_id uuid,\n    store_slug text,\n    affiliate_program text,\n    affiliate_id text,\n    custom_tracking_params jsonb,\n    priority integer DEFAULT 1,\n    notes text\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "store_id",
            "type": "uuid"
          },
          {
            "name": "store_name",
            "type": "text"
          },
          {
            "name": "domain",
            "type": "text"
          },
          {
            "name": "reason",
            "type": "text"
          },
          {
            "name": "is_active",
            "type": "boolean"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "owner_id",
            "type": "uuid"
          },
          {
            "name": "store_slug",
            "type": "text"
          },
          {
            "name": "affiliate_program",
            "type": "text"
          },
          {
            "name": "affiliate_id",
            "type": "text"
          },
          {
            "name": "custom_tracking_params",
            "type": "jsonb"
          },
          {
            "name": "priority",
            "type": "integer"
          },
          {
            "name": "notes",
            "type": "text"
          }
        ]
      },
      {
        "name": "realtime.messages",
        "definition": "\n    topic text NOT NULL,\n    extension text NOT NULL,\n    payload jsonb,\n    event text,\n    private boolean DEFAULT false,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    inserted_at timestamp without time zone DEFAULT now() NOT NULL,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n)\nPARTITION BY RANGE (inserted_at",
        "columns": [
          {
            "name": "topic",
            "type": "text"
          },
          {
            "name": "extension",
            "type": "text"
          },
          {
            "name": "payload",
            "type": "jsonb"
          },
          {
            "name": "event",
            "type": "text"
          },
          {
            "name": "private",
            "type": "boolean"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "inserted_at",
            "type": "timestamp"
          },
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "PARTITION",
            "type": "BY"
          }
        ]
      },
      {
        "name": "realtime.messages_2025_07_18",
        "definition": "\n    topic text NOT NULL,\n    extension text NOT NULL,\n    payload jsonb,\n    event text,\n    private boolean DEFAULT false,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    inserted_at timestamp without time zone DEFAULT now() NOT NULL,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n",
        "columns": [
          {
            "name": "topic",
            "type": "text"
          },
          {
            "name": "extension",
            "type": "text"
          },
          {
            "name": "payload",
            "type": "jsonb"
          },
          {
            "name": "event",
            "type": "text"
          },
          {
            "name": "private",
            "type": "boolean"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "inserted_at",
            "type": "timestamp"
          },
          {
            "name": "id",
            "type": "uuid"
          }
        ]
      },
      {
        "name": "realtime.messages_2025_07_19",
        "definition": "\n    topic text NOT NULL,\n    extension text NOT NULL,\n    payload jsonb,\n    event text,\n    private boolean DEFAULT false,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    inserted_at timestamp without time zone DEFAULT now() NOT NULL,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n",
        "columns": [
          {
            "name": "topic",
            "type": "text"
          },
          {
            "name": "extension",
            "type": "text"
          },
          {
            "name": "payload",
            "type": "jsonb"
          },
          {
            "name": "event",
            "type": "text"
          },
          {
            "name": "private",
            "type": "boolean"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "inserted_at",
            "type": "timestamp"
          },
          {
            "name": "id",
            "type": "uuid"
          }
        ]
      },
      {
        "name": "realtime.messages_2025_07_20",
        "definition": "\n    topic text NOT NULL,\n    extension text NOT NULL,\n    payload jsonb,\n    event text,\n    private boolean DEFAULT false,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    inserted_at timestamp without time zone DEFAULT now() NOT NULL,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n",
        "columns": [
          {
            "name": "topic",
            "type": "text"
          },
          {
            "name": "extension",
            "type": "text"
          },
          {
            "name": "payload",
            "type": "jsonb"
          },
          {
            "name": "event",
            "type": "text"
          },
          {
            "name": "private",
            "type": "boolean"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "inserted_at",
            "type": "timestamp"
          },
          {
            "name": "id",
            "type": "uuid"
          }
        ]
      },
      {
        "name": "realtime.messages_2025_07_21",
        "definition": "\n    topic text NOT NULL,\n    extension text NOT NULL,\n    payload jsonb,\n    event text,\n    private boolean DEFAULT false,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    inserted_at timestamp without time zone DEFAULT now() NOT NULL,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n",
        "columns": [
          {
            "name": "topic",
            "type": "text"
          },
          {
            "name": "extension",
            "type": "text"
          },
          {
            "name": "payload",
            "type": "jsonb"
          },
          {
            "name": "event",
            "type": "text"
          },
          {
            "name": "private",
            "type": "boolean"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "inserted_at",
            "type": "timestamp"
          },
          {
            "name": "id",
            "type": "uuid"
          }
        ]
      },
      {
        "name": "realtime.messages_2025_07_22",
        "definition": "\n    topic text NOT NULL,\n    extension text NOT NULL,\n    payload jsonb,\n    event text,\n    private boolean DEFAULT false,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    inserted_at timestamp without time zone DEFAULT now() NOT NULL,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n",
        "columns": [
          {
            "name": "topic",
            "type": "text"
          },
          {
            "name": "extension",
            "type": "text"
          },
          {
            "name": "payload",
            "type": "jsonb"
          },
          {
            "name": "event",
            "type": "text"
          },
          {
            "name": "private",
            "type": "boolean"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "inserted_at",
            "type": "timestamp"
          },
          {
            "name": "id",
            "type": "uuid"
          }
        ]
      },
      {
        "name": "realtime.messages_2025_07_23",
        "definition": "\n    topic text NOT NULL,\n    extension text NOT NULL,\n    payload jsonb,\n    event text,\n    private boolean DEFAULT false,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    inserted_at timestamp without time zone DEFAULT now() NOT NULL,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n",
        "columns": [
          {
            "name": "topic",
            "type": "text"
          },
          {
            "name": "extension",
            "type": "text"
          },
          {
            "name": "payload",
            "type": "jsonb"
          },
          {
            "name": "event",
            "type": "text"
          },
          {
            "name": "private",
            "type": "boolean"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "inserted_at",
            "type": "timestamp"
          },
          {
            "name": "id",
            "type": "uuid"
          }
        ]
      },
      {
        "name": "realtime.messages_2025_07_24",
        "definition": "\n    topic text NOT NULL,\n    extension text NOT NULL,\n    payload jsonb,\n    event text,\n    private boolean DEFAULT false,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    inserted_at timestamp without time zone DEFAULT now() NOT NULL,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n",
        "columns": [
          {
            "name": "topic",
            "type": "text"
          },
          {
            "name": "extension",
            "type": "text"
          },
          {
            "name": "payload",
            "type": "jsonb"
          },
          {
            "name": "event",
            "type": "text"
          },
          {
            "name": "private",
            "type": "boolean"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "inserted_at",
            "type": "timestamp"
          },
          {
            "name": "id",
            "type": "uuid"
          }
        ]
      },
      {
        "name": "realtime.schema_migrations",
        "definition": "\n    version bigint NOT NULL,\n    inserted_at timestamp(0) without time zone\n",
        "columns": [
          {
            "name": "version",
            "type": "bigint"
          },
          {
            "name": "inserted_at",
            "type": "timestamp(0)"
          }
        ]
      },
      {
        "name": "realtime.subscription",
        "definition": "\n    id bigint NOT NULL,\n    subscription_id uuid NOT NULL,\n    entity regclass NOT NULL,\n    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,\n    claims jsonb NOT NULL,\n    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,\n    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL\n",
        "columns": [
          {
            "name": "id",
            "type": "bigint"
          },
          {
            "name": "subscription_id",
            "type": "uuid"
          },
          {
            "name": "entity",
            "type": "regclass"
          },
          {
            "name": "filters",
            "type": "realtime.user_defined_filter[]"
          },
          {
            "name": "claims",
            "type": "jsonb"
          },
          {
            "name": "claims_role",
            "type": "regrole"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          }
        ]
      },
      {
        "name": "storage.buckets",
        "definition": "\n    id text NOT NULL,\n    name text NOT NULL,\n    owner uuid,\n    created_at timestamp with time zone DEFAULT now(),\n    updated_at timestamp with time zone DEFAULT now(),\n    public boolean DEFAULT false,\n    avif_autodetection boolean DEFAULT false,\n    file_size_limit bigint,\n    allowed_mime_types text[],\n    owner_id text\n",
        "columns": [
          {
            "name": "id",
            "type": "text"
          },
          {
            "name": "name",
            "type": "text"
          },
          {
            "name": "owner",
            "type": "uuid"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "public",
            "type": "boolean"
          },
          {
            "name": "avif_autodetection",
            "type": "boolean"
          },
          {
            "name": "file_size_limit",
            "type": "bigint"
          },
          {
            "name": "allowed_mime_types",
            "type": "text[]"
          },
          {
            "name": "owner_id",
            "type": "text"
          }
        ]
      },
      {
        "name": "storage.migrations",
        "definition": "\n    id integer NOT NULL,\n    name character varying(100) NOT NULL,\n    hash character varying(40) NOT NULL,\n    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP\n",
        "columns": [
          {
            "name": "id",
            "type": "integer"
          },
          {
            "name": "name",
            "type": "character"
          },
          {
            "name": "hash",
            "type": "character"
          },
          {
            "name": "executed_at",
            "type": "timestamp"
          }
        ]
      },
      {
        "name": "storage.objects",
        "definition": "\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    bucket_id text,\n    name text,\n    owner uuid,\n    created_at timestamp with time zone DEFAULT now(),\n    updated_at timestamp with time zone DEFAULT now(),\n    last_accessed_at timestamp with time zone DEFAULT now(),\n    metadata jsonb,\n    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,\n    version text,\n    owner_id text,\n    user_metadata jsonb\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "bucket_id",
            "type": "text"
          },
          {
            "name": "name",
            "type": "text"
          },
          {
            "name": "owner",
            "type": "uuid"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          },
          {
            "name": "last_accessed_at",
            "type": "timestamp"
          },
          {
            "name": "metadata",
            "type": "jsonb"
          },
          {
            "name": "path_tokens",
            "type": "text[]"
          },
          {
            "name": "version",
            "type": "text"
          },
          {
            "name": "owner_id",
            "type": "text"
          },
          {
            "name": "user_metadata",
            "type": "jsonb"
          }
        ]
      },
      {
        "name": "storage.s3_multipart_uploads",
        "definition": "\n    id text NOT NULL,\n    in_progress_size bigint DEFAULT 0 NOT NULL,\n    upload_signature text NOT NULL,\n    bucket_id text NOT NULL,\n    key text NOT NULL COLLATE pg_catalog.\"C\",\n    version text NOT NULL,\n    owner_id text,\n    created_at timestamp with time zone DEFAULT now() NOT NULL,\n    user_metadata jsonb\n",
        "columns": [
          {
            "name": "id",
            "type": "text"
          },
          {
            "name": "in_progress_size",
            "type": "bigint"
          },
          {
            "name": "upload_signature",
            "type": "text"
          },
          {
            "name": "bucket_id",
            "type": "text"
          },
          {
            "name": "key",
            "type": "text"
          },
          {
            "name": "version",
            "type": "text"
          },
          {
            "name": "owner_id",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "user_metadata",
            "type": "jsonb"
          }
        ]
      },
      {
        "name": "storage.s3_multipart_uploads_parts",
        "definition": "\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    upload_id text NOT NULL,\n    size bigint DEFAULT 0 NOT NULL,\n    part_number integer NOT NULL,\n    bucket_id text NOT NULL,\n    key text NOT NULL COLLATE pg_catalog.\"C\",\n    etag text NOT NULL,\n    owner_id text,\n    version text NOT NULL,\n    created_at timestamp with time zone DEFAULT now() NOT NULL\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "upload_id",
            "type": "text"
          },
          {
            "name": "size",
            "type": "bigint"
          },
          {
            "name": "part_number",
            "type": "integer"
          },
          {
            "name": "bucket_id",
            "type": "text"
          },
          {
            "name": "key",
            "type": "text"
          },
          {
            "name": "etag",
            "type": "text"
          },
          {
            "name": "owner_id",
            "type": "text"
          },
          {
            "name": "version",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          }
        ]
      },
      {
        "name": "supabase_migrations.schema_migrations",
        "definition": "\n    version text NOT NULL,\n    statements text[],\n    name text\n",
        "columns": [
          {
            "name": "version",
            "type": "text"
          },
          {
            "name": "statements",
            "type": "text[]"
          },
          {
            "name": "name",
            "type": "text"
          }
        ]
      },
      {
        "name": "supabase_migrations.seed_files",
        "definition": "\n    path text NOT NULL,\n    hash text NOT NULL\n",
        "columns": [
          {
            "name": "path",
            "type": "text"
          },
          {
            "name": "hash",
            "type": "text"
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "graphql_public.graphql",
        "parameters": "\"operationName\" text default null,\n            query text default null,\n            variables jsonb default null,\n            extensions jsonb default null",
        "returnType": "jsonb\n            language sql",
        "definition": "select graphql.resolve(\n                query := query,\n                variables := coalesce(variables, '{}'),\n                \"operationName\" := \"operationName\",\n                extensions := extensions\n            );"
      },
      {
        "name": "graphql_public.graphql",
        "parameters": "\"operationName\" text default null,\n            query text default null,\n            variables jsonb default null,\n            extensions jsonb default null",
        "returnType": "jsonb\n            language plpgsql\n        as $$\n            DECLARE\n                server_version float;\n            BEGIN\n                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);\n\n                IF server_version >= 14 THEN\n                    RETURN jsonb_build_object(\n                        'errors', jsonb_build_array(\n                            jsonb_build_object(\n                                'message', 'pg_graphql extension is not enabled.'\n                            )\n                        )\n                    );\n                ELSE\n                    RETURN jsonb_build_object(\n                        'errors', jsonb_build_array(\n                            jsonb_build_object(\n                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'\n                            )\n                        )\n                    );\n                END IF;\n            END;\n        $$;\n    END IF;\n\n    END;\n$_$;\n\n\nALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;\n\n--\n-- TOC entry 4583 (class 0 OID 0)\n-- Dependencies: 458\n-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin\n--\n\nCOMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';\n\n\n--\n-- TOC entry 365 (class 1255 OID 93571)\n-- Name: add_store_utm_exception(uuid, text, text, text, integer); Type: FUNCTION; Schema: public; Owner: postgres\n--\n\nCREATE FUNCTION public.add_store_utm_exception(p_store_id uuid, p_reason text DEFAULT NULL::text, p_affiliate_program text DEFAULT NULL::text, p_affiliate_id text DEFAULT NULL::text, p_priority integer DEFAULT 1) RETURNS uuid\n    LANGUAGE plpgsql SECURITY DEFINER\n    AS $$\r\nDECLARE\r\n  v_exception_id UUID;\r\n  v_store_record RECORD;\r\nBEGIN\r\n  -- Obtener datos de la tienda\r\n  SELECT s.*, p.id as owner_id \r\n  INTO v_store_record\r\n  FROM stores s\r\n  LEFT JOIN profiles p ON s.owner_id = p.id\r\n  WHERE s.id = p_store_id;\r\n  \r\n  IF NOT FOUND THEN\r\n    RAISE EXCEPTION 'Store not found: %', p_store_id;\r\n  END IF;\r\n  \r\n  -- Insertar excepción\r\n  INSERT INTO utm_tracking_exceptions (\r\n    store_id,\r\n    owner_id,\r\n    store_name,\r\n    store_slug,\r\n    domain,\r\n    reason,\r\n    affiliate_program,\r\n    affiliate_id,\r\n    priority,\r\n    is_active\r\n  ) VALUES (\r\n    p_store_id,\r\n    v_store_record.owner_id,\r\n    v_store_record.name,\r\n    v_store_record.slug,\r\n    COALESCE(\r\n      -- Extraer dominio de website si existe\r\n      CASE \r\n        WHEN v_store_record.website IS NOT NULL \r\n        THEN regexp_replace(\r\n          regexp_replace(v_store_record.website, '^https?://', ''), \r\n          '^www\\.', ''\r\n        )\r\n        ELSE NULL\r\n      END,\r\n      'unknown-domain.com'\r\n    ),\r\n    p_reason,\r\n    p_affiliate_program,\r\n    p_affiliate_id,\r\n    p_priority,\r\n    true\r\n  ) RETURNING id INTO v_exception_id;\r\n  \r\n  RETURN v_exception_id;\r\nEND;\r\n$$;\n\n\nALTER FUNCTION public.add_store_utm_exception(p_store_id uuid, p_reason text, p_affiliate_program text, p_affiliate_id text, p_priority integer) OWNER TO postgres;\n\n--\n-- TOC entry 412 (class 1255 OID 58838)\n-- Name: auto_create_store_on_approval(); Type: FUNCTION; Schema: public; Owner: postgres\n--\n\nCREATE FUNCTION public.auto_create_store_on_approval() RETURNS trigger\n    LANGUAGE plpgsql SECURITY DEFINER\n    AS $$\nBEGIN\n  -- Solo proceder si el estado cambió a 'approved' y no existía antes\n  IF NEW.status = 'approved' AND (OLD.status IS NULL OR OLD.status != 'approved') THEN\n    -- Verificar que no exista ya una tienda para este usuario\n    IF NOT EXISTS (\n      SELECT 1 FROM stores \n      WHERE user_id = NEW.user_id\n      AND name = NEW.store_name\n    ) THEN\n      -- Crear la tienda usando los campos correctos de la tabla stores\n      INSERT INTO stores (\n        user_id,           -- UUID - ID del usuario propietario\n        owner_id,          -- TEXT - Convertimos el UUID a texto\n        name,              -- TEXT - Nombre de la tienda\n        slug,              -- TEXT - Slug generado automáticamente\n        description,       -- TEXT - Descripción de la tienda\n        website,           -- TEXT - Sitio web\n        logo_url,          -- TEXT - URL del logo\n        category,          -- TEXT - Categoría\n        contact_email,     -- TEXT - Email de contacto\n        contact_phone,     -- TEXT - Teléfono de contacto\n        address,           -- TEXT - Dirección\n        is_active,         -- BOOLEAN - Estado activo\n        store_application_id, -- UUID - Referencia a la solicitud\n        created_at,        -- TIMESTAMP - Fecha de creación\n        updated_at         -- TIMESTAMP - Fecha de actualización\n      ) VALUES (\n        NEW.user_id,                    -- user_id (UUID)\n        NEW.user_id::text,              -- owner_id (TEXT) - convertimos UUID a texto\n        NEW.store_name,                 -- name\n        LOWER(REGEXP_REPLACE(           -- slug - generar slug limpio\n          REGEXP_REPLACE(NEW.store_name, '[^a-zA-Z0-9\\s]', '', 'g'), \n          '\\s+', '-', 'g'\n        )),\n        COALESCE(NEW.description, ''),  -- description\n        NEW.website,                    -- website\n        NEW.logo_url,                   -- logo_url\n        NEW.category,                   -- category\n        NEW.contact_email,              -- contact_email\n        NEW.contact_phone,              -- contact_phone\n        NEW.address,                    -- address\n        true,                           -- is_active\n        NEW.id,                         -- store_application_id\n        NOW(),                          -- created_at\n        NOW()                           -- updated_at\n      );\n      \n      -- Actualizar el rol del usuario a 'merchant' si no lo es ya\n      UPDATE profiles \n      SET role = 'merchant', updated_at = NOW()\n      WHERE id = NEW.user_id \n      AND role NOT IN ('merchant', 'admin');\n      \n      -- Log para debugging\n      RAISE NOTICE 'Tienda creada automáticamente: % para usuario: %', NEW.store_name, NEW.user_id;\n      \n    ELSE\n      RAISE NOTICE 'Ya existe una tienda con el nombre % para el usuario %', NEW.store_name, NEW.user_id;\n    END IF;\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$;\n\n\nALTER FUNCTION public.auto_create_store_on_approval() OWNER TO postgres;\n\n--\n-- TOC entry 399 (class 1255 OID 96175)\n-- Name: auto_generate_pixel_id(); Type: FUNCTION; Schema: public; Owner: postgres\n--\n\nCREATE FUNCTION public.auto_generate_pixel_id() RETURNS trigger\n    LANGUAGE plpgsql\n    AS $$\r\nBEGIN\r\n    IF NEW.pixel_id IS NULL OR NEW.pixel_id = '' THEN\r\n        NEW.pixel_id := generate_pixel_id();\r\n    END IF;\r\n    RETURN NEW;\r\nEND;\r\n$$;\n\n\nALTER FUNCTION public.auto_generate_pixel_id() OWNER TO postgres;\n\n--\n-- TOC entry 325 (class 1255 OID 122478)\n-- Name: deactivate_expired_coupons(); Type: FUNCTION; Schema: public; Owner: postgres\n--\n\nCREATE FUNCTION public.deactivate_expired_coupons() RETURNS trigger\n    LANGUAGE plpgsql\n    AS $$\r\nBEGIN\r\n  IF NEW.expiry_date IS NOT NULL AND NEW.expiry_date < NOW() THEN\r\n    NEW.is_active := FALSE;\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$$;\n\n\nALTER FUNCTION public.deactivate_expired_coupons() OWNER TO postgres;\n\n--\n-- TOC entry 326 (class 1255 OID 92316)\n-- Name: detect_device_type(text); Type: FUNCTION; Schema: public; Owner: postgres\n--\n\nCREATE FUNCTION public.detect_device_type(user_agent_string text) RETURNS text\n    LANGUAGE plpgsql\n    AS $$\r\nBEGIN\r\n    IF user_agent_string IS NULL THEN\r\n        RETURN 'unknown';\r\n    END IF;\r\n    \r\n    -- Mobile detection\r\n    IF user_agent_string ~* '(iPhone|iPod|Android|BlackBerry|Windows Phone|Mobile)' THEN\r\n        RETURN 'mobile';\r\n    END IF;\r\n    \r\n    -- Tablet detection\r\n    IF user_agent_string ~* '(iPad|Tablet)' THEN\r\n        RETURN 'tablet';\r\n    END IF;\r\n    \r\n    -- Desktop (default)\r\n    RETURN 'desktop';\r\nEND;\r\n$$;\n\n\nALTER FUNCTION public.detect_device_type(user_agent_string text) OWNER TO postgres;\n\n--\n-- TOC entry 329 (class 1255 OID 97458)\n-- Name: generate_invoice_number(); Type: FUNCTION; Schema: public; Owner: postgres\n--\n\nCREATE FUNCTION public.generate_invoice_number() RETURNS trigger\n    LANGUAGE plpgsql\n    AS $$\r\nBEGIN\r\n  IF NEW.invoice_number IS NULL THEN\r\n    NEW.invoice_number = 'INV-' || TO_CHAR(NOW(), 'YYYY') || '-' || LPAD(nextval('invoice_sequence')::TEXT, 6, '0');\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$$;\n\n\nALTER FUNCTION public.generate_invoice_number() OWNER TO postgres;\n\n--\n-- TOC entry 394 (class 1255 OID 97506)\n-- Name: generate_monthly_payment_reminders(); Type: FUNCTION; Schema: public; Owner: postgres\n--\n\nCREATE FUNCTION public.generate_monthly_payment_reminders() RETURNS void\n    LANGUAGE plpgsql\n    AS $$\nBEGIN\n  -- This would call your API endpoint or execute the logic directly\n  -- For now, we'll just log that the function was called\n  INSERT INTO system_logs (message, created_at) \n  VALUES ('Monthly payment reminders generation triggered', NOW());\nEND;\n$$;\n\n\nALTER FUNCTION public.generate_monthly_payment_reminders() OWNER TO postgres;\n\n--\n-- TOC entry 398 (class 1255 OID 96174)\n-- Name: generate_pixel_id(); Type: FUNCTION; Schema: public; Owner: postgres\n--\n\nCREATE FUNCTION public.generate_pixel_id() RETURNS text\n    LANGUAGE plpgsql\n    AS $$\r\nDECLARE\r\n    new_id TEXT;\r\n    exists_check INTEGER;\r\nBEGIN\r\n    LOOP\r\n        new_id := 'px_' || substr(md5(random()::text), 1, 10);\r\n        SELECT COUNT(*) INTO exists_check FROM tracking_pixels WHERE pixel_id = new_id;\r\n        EXIT WHEN exists_check = 0;\r\n    END LOOP;\r\n    RETURN new_id;\r\nEND;\r\n$$;\n\n\nALTER FUNCTION public.generate_pixel_id() OWNER TO postgres;\n\n--\n-- TOC entry 324 (class 1255 OID 18558)\n-- Name: handle_new_user(); Type: FUNCTION; Schema: public; Owner: postgres\n--\n\nCREATE FUNCTION public.handle_new_user() RETURNS trigger\n    LANGUAGE plpgsql SECURITY DEFINER\n    AS $$\nBEGIN\n  -- Insertar un nuevo registro en la tabla profiles con rol 'user' por defecto\n  INSERT INTO public.profiles (id, email, username, full_name, role)\n  VALUES (\n    NEW.id,\n    NEW.email,\n    NEW.raw_user_meta_data->>'username',\n    NEW.raw_user_meta_data->>'full_name',\n    'user'  -- Asignar rol 'user' por defecto\n  );\n  RETURN NEW;\nEND;\n$$;\n\n\nALTER FUNCTION public.handle_new_user() OWNER TO postgres;\n\n--\n-- TOC entry 395 (class 1255 OID 97507)\n-- Name: send_pending_payment_reminders(); Type: FUNCTION; Schema: public; Owner: postgres\n--\n\nCREATE FUNCTION public.send_pending_payment_reminders() RETURNS void\n    LANGUAGE plpgsql\n    AS $$\nBEGIN\n  -- This would call your API endpoint or execute the logic directly\n  -- For now, we'll just log that the function was called\n  INSERT INTO system_logs (message, created_at) \n  VALUES ('Payment reminders sending triggered', NOW());\nEND;\n$$;\n\n\nALTER FUNCTION public.send_pending_payment_reminders() OWNER TO postgres;\n\n--\n-- TOC entry 327 (class 1255 OID 92317)\n-- Name: set_device_type(); Type: FUNCTION; Schema: public; Owner: postgres\n--\n\nCREATE FUNCTION public.set_device_type() RETURNS trigger\n    LANGUAGE plpgsql\n    AS $$\r\nBEGIN\r\n    IF NEW.device_type IS NULL AND NEW.user_agent IS NOT NULL THEN\r\n        NEW.device_type := detect_device_type(NEW.user_agent);\r\n    END IF;\r\n    \r\n    NEW.updated_at := NOW();\r\n    RETURN NEW;\r\nEND;\r\n$$;\n\n\nALTER FUNCTION public.set_device_type() OWNER TO postgres;\n\n--\n-- TOC entry 366 (class 1255 OID 93572)\n-- Name: should_exclude_utm_tracking(uuid, text, uuid); Type: FUNCTION; Schema: public; Owner: postgres\n--\n\nCREATE FUNCTION public.should_exclude_utm_tracking(p_store_id uuid DEFAULT NULL::uuid, p_domain text DEFAULT NULL::text, p_owner_id uuid DEFAULT NULL::uuid) RETURNS TABLE(should_exclude boolean, exception_id uuid, reason text, affiliate_program text, affiliate_id text)\n    LANGUAGE plpgsql SECURITY DEFINER\n    AS $$\r\nBEGIN\r\n  RETURN QUERY\r\n  SELECT \r\n    true as should_exclude,\r\n    ute.id as exception_id,\r\n    ute.reason,\r\n    ute.affiliate_program,\r\n    ute.affiliate_id\r\n  FROM utm_tracking_exceptions ute\r\n  WHERE ute.is_active = true\r\n    AND (\r\n      -- Coincidencia exacta por store_id (máxima prioridad)\r\n      (p_store_id IS NOT NULL AND ute.store_id = p_store_id)\r\n      OR\r\n      -- Coincidencia por owner_id\r\n      (p_owner_id IS NOT NULL AND ute.owner_id = p_owner_id)\r\n      OR\r\n      -- Coincidencia por dominio\r\n      (p_domain IS NOT NULL AND p_domain ILIKE '%' || ute.domain || '%')\r\n    )\r\n  ORDER BY \r\n    -- Priorizar coincidencias exactas\r\n    CASE \r\n      WHEN ute.store_id = p_store_id THEN 1\r\n      WHEN ute.owner_id = p_owner_id THEN 2\r\n      WHEN p_domain ILIKE '%' || ute.domain || '%' THEN 3\r\n      ELSE 4\r\n    END,\r\n    ute.priority ASC\r\n  LIMIT 1;\r\n  \r\n  -- Si no hay coincidencias, no excluir\r\n  IF NOT FOUND THEN\r\n    RETURN QUERY SELECT false, NULL::UUID, NULL::TEXT, NULL::TEXT, NULL::TEXT;\r\n  END IF;\r\nEND;\r\n$$;\n\n\nALTER FUNCTION public.should_exclude_utm_tracking(p_store_id uuid, p_domain text, p_owner_id uuid) OWNER TO postgres;\n\n--\n-- TOC entry 323 (class 1255 OID 97456)\n-- Name: update_payment_reminders_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres\n--\n\nCREATE FUNCTION public.update_payment_reminders_updated_at() RETURNS trigger\n    LANGUAGE plpgsql\n    AS $$\r\nBEGIN\r\n  NEW.updated_at = NOW();\r\n  RETURN NEW;\r\nEND;\r\n$$;\n\n\nALTER FUNCTION public.update_payment_reminders_updated_at() OWNER TO postgres;\n\n--\n-- TOC entry 388 (class 1255 OID 96108)\n-- Name: update_tracking_conversions_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres\n--\n\nCREATE FUNCTION public.update_tracking_conversions_updated_at() RETURNS trigger\n    LANGUAGE plpgsql\n    AS $$\r\nBEGIN\r\n    NEW.updated_at = NOW();\r\n    RETURN NEW;\r\nEND;\r\n$$;\n\n\nALTER FUNCTION public.update_tracking_conversions_updated_at() OWNER TO postgres;\n\n--\n-- TOC entry 397 (class 1255 OID 96172)\n-- Name: update_tracking_pixels_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres\n--\n\nCREATE FUNCTION public.update_tracking_pixels_updated_at() RETURNS trigger\n    LANGUAGE plpgsql\n    AS $$\r\nBEGIN\r\n    NEW.updated_at = NOW();\r\n    RETURN NEW;\r\nEND;\r\n$$;\n\n\nALTER FUNCTION public.update_tracking_pixels_updated_at() OWNER TO postgres;\n\n--\n-- TOC entry 478 (class 1255 OID 17250)\n-- Name: update_updated_at_column(); Type: FUNCTION; Schema: public; Owner: postgres\n--\n\nCREATE FUNCTION public.update_updated_at_column() RETURNS trigger\n    LANGUAGE plpgsql\n    AS $$\nBEGIN\n  NEW.updated_at = CURRENT_TIMESTAMP;\n  RETURN NEW;\nEND;\n$$;\n\n\nALTER FUNCTION public.update_updated_at_column() OWNER TO postgres;\n\n--\n-- TOC entry 416 (class 1255 OID 17337)\n-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin\n--\n\nCREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls\n    LANGUAGE plpgsql",
        "definition": "declare\n-- Regclass of the table e.g. public.notes\nentity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;\n\n-- I, U, D, T: insert, update ...\naction realtime.action = (\n    case wal ->> 'action'\n        when 'I' then 'INSERT'\n        when 'U' then 'UPDATE'\n        when 'D' then 'DELETE'\n        else 'ERROR'\n    end\n);\n\n-- Is row level security enabled for the table\nis_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;\n\nsubscriptions realtime.subscription[] = array_agg(subs)\n    from\n        realtime.subscription subs\n    where\n        subs.entity = entity_;\n\n-- Subscription vars\nroles regrole[] = array_agg(distinct us.claims_role::text)\n    from\n        unnest(subscriptions) us;\n\nworking_role regrole;\nclaimed_role regrole;\nclaims jsonb;\n\nsubscription_id uuid;\nsubscription_has_access bool;\nvisible_to_subscription_ids uuid[] = '{}';\n\n-- structured info for wal's columns\ncolumns realtime.wal_column[];\n-- previous identity values for update/delete\nold_columns realtime.wal_column[];\n\nerror_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;\n\n-- Primary jsonb output for record\noutput jsonb;\n\nbegin\nperform set_config('role', null, true);\n\ncolumns =\n    array_agg(\n        (\n            x->>'name',\n            x->>'type',\n            x->>'typeoid',\n            realtime.cast(\n                (x->'value') #>> '{}',\n                coalesce(\n                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4\n                    (x->>'type')::regtype\n                )\n            ),\n            (pks ->> 'name') is not null,\n            true\n        )::realtime.wal_column\n    )\n    from\n        jsonb_array_elements(wal -> 'columns') x\n        left join jsonb_array_elements(wal -> 'pk') pks\n            on (x ->> 'name') = (pks ->> 'name');\n\nold_columns =\n    array_agg(\n        (\n            x->>'name',\n            x->>'type',\n            x->>'typeoid',\n            realtime.cast(\n                (x->'value') #>> '{}',\n                coalesce(\n                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4\n                    (x->>'type')::regtype\n                )\n            ),\n            (pks ->> 'name') is not null,\n            true\n        )::realtime.wal_column\n    )\n    from\n        jsonb_array_elements(wal -> 'identity') x\n        left join jsonb_array_elements(wal -> 'pk') pks\n            on (x ->> 'name') = (pks ->> 'name');\n\nfor working_role in select * from unnest(roles) loop\n\n    -- Update `is_selectable` for columns and old_columns\n    columns =\n        array_agg(\n            (\n                c.name,\n                c.type_name,\n                c.type_oid,\n                c.value,\n                c.is_pkey,\n                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')\n            )::realtime.wal_column\n        )\n        from\n            unnest(columns) c;\n\n    old_columns =\n            array_agg(\n                (\n                    c.name,\n                    c.type_name,\n                    c.type_oid,\n                    c.value,\n                    c.is_pkey,\n                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')\n                )::realtime.wal_column\n            )\n            from\n                unnest(old_columns) c;\n\n    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then\n        return next (\n            jsonb_build_object(\n                'schema', wal ->> 'schema',\n                'table', wal ->> 'table',\n                'type', action\n            ),\n            is_rls_enabled,\n            -- subscriptions is already filtered by entity\n            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),\n            array['Error 400: Bad Request, no primary key']\n        )::realtime.wal_rls;\n\n    -- The claims role does not have SELECT permission to the primary key of entity\n    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then\n        return next (\n            jsonb_build_object(\n                'schema', wal ->> 'schema',\n                'table', wal ->> 'table',\n                'type', action\n            ),\n            is_rls_enabled,\n            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),\n            array['Error 401: Unauthorized']\n        )::realtime.wal_rls;\n\n    else\n        output = jsonb_build_object(\n            'schema', wal ->> 'schema',\n            'table', wal ->> 'table',\n            'type', action,\n            'commit_timestamp', to_char(\n                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),\n                'YYYY-MM-DD\"T\"HH24:MI:SS.MS\"Z\"'\n            ),\n            'columns', (\n                select\n                    jsonb_agg(\n                        jsonb_build_object(\n                            'name', pa.attname,\n                            'type', pt.typname\n                        )\n                        order by pa.attnum asc\n                    )\n                from\n                    pg_attribute pa\n                    join pg_type pt\n                        on pa.atttypid = pt.oid\n                where\n                    attrelid = entity_\n                    and attnum > 0\n                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')\n            )\n        )\n        -- Add \"record\" key for insert and update\n        || case\n            when action in ('INSERT', 'UPDATE') then\n                jsonb_build_object(\n                    'record',\n                    (\n                        select\n                            jsonb_object_agg(\n                                -- if unchanged toast, get column name and value from old record\n                                coalesce((c).name, (oc).name),\n                                case\n                                    when (c).name is null then (oc).value\n                                    else (c).value\n                                end\n                            )\n                        from\n                            unnest(columns) c\n                            full outer join unnest(old_columns) oc\n                                on (c).name = (oc).name\n                        where\n                            coalesce((c).is_selectable, (oc).is_selectable)\n                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))\n                    )\n                )\n            else '{}'::jsonb\n        end\n        -- Add \"old_record\" key for update and delete\n        || case\n            when action = 'UPDATE' then\n                jsonb_build_object(\n                        'old_record',\n                        (\n                            select jsonb_object_agg((c).name, (c).value)\n                            from unnest(old_columns) c\n                            where\n                                (c).is_selectable\n                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))\n                        )\n                    )\n            when action = 'DELETE' then\n                jsonb_build_object(\n                    'old_record',\n                    (\n                        select jsonb_object_agg((c).name, (c).value)\n                        from unnest(old_columns) c\n                        where\n                            (c).is_selectable\n                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))\n                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey\n                    )\n                )\n            else '{}'::jsonb\n        end;\n\n        -- Create the prepared statement\n        if is_rls_enabled and action <> 'DELETE' then\n            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then\n                deallocate walrus_rls_stmt;\n            end if;\n            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);\n        end if;\n\n        visible_to_subscription_ids = '{}';\n\n        for subscription_id, claims in (\n                select\n                    subs.subscription_id,\n                    subs.claims\n                from\n                    unnest(subscriptions) subs\n                where\n                    subs.entity = entity_\n                    and subs.claims_role = working_role\n                    and (\n                        realtime.is_visible_through_filters(columns, subs.filters)\n                        or (\n                          action = 'DELETE'\n                          and realtime.is_visible_through_filters(old_columns, subs.filters)\n                        )\n                    )\n        ) loop\n\n            if not is_rls_enabled or action = 'DELETE' then\n                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;\n            else\n                -- Check if RLS allows the role to see the record\n                perform\n                    -- Trim leading and trailing quotes from working_role because set_config\n                    -- doesn't recognize the role as valid if they are included\n                    set_config('role', trim(both '\"' from working_role::text), true),\n                    set_config('request.jwt.claims', claims::text, true);\n\n                execute 'execute walrus_rls_stmt' into subscription_has_access;\n\n                if subscription_has_access then\n                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;\n                end if;\n            end if;\n        end loop;\n\n        perform set_config('role', null, true);\n\n        return next (\n            output,\n            is_rls_enabled,\n            visible_to_subscription_ids,\n            case\n                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']\n                else '{}'\n            end\n        )::realtime.wal_rls;\n\n    end if;\nend loop;\n\nperform set_config('role', null, true);\nend;"
      }
    ],
    "triggers": [
      {
        "name": "on_auth_user_created",
        "definition": "AFTER INSERT",
        "table": "auth.users"
      },
      {
        "name": "payment_reminders_updated_at",
        "definition": "BEFORE UPDATE",
        "table": "public.payment_reminders"
      },
      {
        "name": "trg_deactivate_expired_coupons",
        "definition": "BEFORE INSERT OR UPDATE",
        "table": "public.coupons"
      },
      {
        "name": "trigger_auto_create_store_on_approval",
        "definition": "AFTER UPDATE OF status",
        "table": "public.store_applications"
      },
      {
        "name": "trigger_auto_generate_pixel_id",
        "definition": "BEFORE INSERT",
        "table": "public.tracking_pixels"
      },
      {
        "name": "update_coupons_updated_at",
        "definition": "BEFORE UPDATE",
        "table": "public.coupons"
      },
      {
        "name": "update_profiles_updated_at",
        "definition": "BEFORE UPDATE",
        "table": "public.profiles"
      },
      {
        "name": "update_rating_comments_updated_at",
        "definition": "BEFORE UPDATE",
        "table": "public.rating_comments"
      },
      {
        "name": "update_ratings_updated_at",
        "definition": "BEFORE UPDATE",
        "table": "public.ratings"
      },
      {
        "name": "update_store_applications_updated_at",
        "definition": "BEFORE UPDATE",
        "table": "public.store_applications"
      },
      {
        "name": "update_stores_updated_at",
        "definition": "BEFORE UPDATE",
        "table": "public.stores"
      },
      {
        "name": "tr_check_filters",
        "definition": "BEFORE INSERT OR UPDATE",
        "table": "realtime.subscription"
      },
      {
        "name": "update_objects_updated_at",
        "definition": "BEFORE UPDATE",
        "table": "storage.objects"
      }
    ],
    "policies": [
      {
        "name": "tracking_clicks_public_insert ON public.tracking_clicks FOR INSERT WITH CHECK (true);\n\n\n--\n-- TOC entry 4456 (class 3256 OID 92387)\n-- Name: tracking_clicks tracking_clicks_public_select; Type: POLICY; Schema: public; Owner: postgres\n--\n\nCREATE POLICY tracking_clicks_public_select",
        "table": "public.tracking_clicks FOR SELECT USING (true);\n\n\n--\n-- TOC entry 4403 (class 0 OID 96058)\n-- Dependencies: 302\n-- Name: tracking_conversions; Type: ROW SECURITY; Schema: public; Owner: postgres\n--\n\nALTER TABLE public.tracking_conversions ENABLE ROW LEVEL SECURITY;\n\n--\n-- TOC entry 4404 (class 0 OID 96133)\n-- Dependencies: 303\n-- Name: tracking_pixels; Type: ROW SECURITY; Schema: public; Owner: postgres\n--\n\nALTER TABLE public.tracking_pixels ENABLE ROW LEVEL SECURITY;\n\n--\n-- TOC entry 4401 (class 0 OID 91156)\n-- Dependencies: 299\n-- Name: utm_tracking_exceptions; Type: ROW SECURITY; Schema: public; Owner: postgres\n--\n\nALTER TABLE public.utm_tracking_exceptions ENABLE ROW LEVEL SECURITY;\n\n--\n-- TOC entry 4398 (class 0 OID 17418)\n-- Dependencies: 296\n-- Name: messages; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin\n--\n\nALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;\n\n--\n-- TOC entry 4434 (class 3256 OID 53076)\n-- Name: objects Authenticated Users Can Delete Own Files; Type: POLICY; Schema: storage; Owner: supabase_storage_admin\n--\n\nCREATE POLICY"
      }
    ],
    "indexes": [
      {
        "name": "audit_logs_instance_id_idx",
        "table": "auth.audit_log_entries"
      },
      {
        "name": "confirmation_token_idx",
        "table": "auth.users"
      },
      {
        "name": "email_change_token_current_idx",
        "table": "auth.users"
      },
      {
        "name": "email_change_token_new_idx",
        "table": "auth.users"
      },
      {
        "name": "factor_id_created_at_idx",
        "table": "auth.mfa_factors"
      },
      {
        "name": "flow_state_created_at_idx",
        "table": "auth.flow_state"
      },
      {
        "name": "identities_email_idx",
        "table": "auth.identities"
      },
      {
        "name": "identities_user_id_idx",
        "table": "auth.identities"
      },
      {
        "name": "idx_auth_code",
        "table": "auth.flow_state"
      },
      {
        "name": "idx_user_id_auth_method",
        "table": "auth.flow_state"
      },
      {
        "name": "mfa_challenge_created_at_idx",
        "table": "auth.mfa_challenges"
      },
      {
        "name": "mfa_factors_user_friendly_name_unique",
        "table": "auth.mfa_factors"
      },
      {
        "name": "mfa_factors_user_id_idx",
        "table": "auth.mfa_factors"
      },
      {
        "name": "one_time_tokens_relates_to_hash_idx",
        "table": "auth.one_time_tokens"
      },
      {
        "name": "one_time_tokens_token_hash_hash_idx",
        "table": "auth.one_time_tokens"
      },
      {
        "name": "one_time_tokens_user_id_token_type_key",
        "table": "auth.one_time_tokens"
      },
      {
        "name": "reauthentication_token_idx",
        "table": "auth.users"
      },
      {
        "name": "recovery_token_idx",
        "table": "auth.users"
      },
      {
        "name": "refresh_tokens_instance_id_idx",
        "table": "auth.refresh_tokens"
      },
      {
        "name": "refresh_tokens_instance_id_user_id_idx",
        "table": "auth.refresh_tokens"
      },
      {
        "name": "refresh_tokens_parent_idx",
        "table": "auth.refresh_tokens"
      },
      {
        "name": "refresh_tokens_session_id_revoked_idx",
        "table": "auth.refresh_tokens"
      },
      {
        "name": "refresh_tokens_updated_at_idx",
        "table": "auth.refresh_tokens"
      },
      {
        "name": "saml_providers_sso_provider_id_idx",
        "table": "auth.saml_providers"
      },
      {
        "name": "saml_relay_states_created_at_idx",
        "table": "auth.saml_relay_states"
      },
      {
        "name": "saml_relay_states_for_email_idx",
        "table": "auth.saml_relay_states"
      },
      {
        "name": "saml_relay_states_sso_provider_id_idx",
        "table": "auth.saml_relay_states"
      },
      {
        "name": "sessions_not_after_idx",
        "table": "auth.sessions"
      },
      {
        "name": "sessions_user_id_idx",
        "table": "auth.sessions"
      },
      {
        "name": "sso_domains_domain_idx",
        "table": "auth.sso_domains"
      },
      {
        "name": "sso_domains_sso_provider_id_idx",
        "table": "auth.sso_domains"
      },
      {
        "name": "sso_providers_resource_id_idx",
        "table": "auth.sso_providers"
      },
      {
        "name": "unique_phone_factor_per_user",
        "table": "auth.mfa_factors"
      },
      {
        "name": "user_id_created_at_idx",
        "table": "auth.sessions"
      },
      {
        "name": "users_email_partial_key",
        "table": "auth.users"
      },
      {
        "name": "users_instance_id_email_idx",
        "table": "auth.users"
      },
      {
        "name": "users_instance_id_idx",
        "table": "auth.users"
      },
      {
        "name": "users_is_anonymous_idx",
        "table": "auth.users"
      },
      {
        "name": "idx_affiliate_tokens_domain",
        "table": "public.affiliate_tokens"
      },
      {
        "name": "idx_coupons_expiry_date",
        "table": "public.coupons"
      },
      {
        "name": "idx_coupons_is_active",
        "table": "public.coupons"
      },
      {
        "name": "idx_coupons_store_id",
        "table": "public.coupons"
      },
      {
        "name": "idx_notifications_user_id",
        "table": "public.notifications"
      },
      {
        "name": "idx_ratings_coupon_id",
        "table": "public.ratings"
      },
      {
        "name": "idx_ratings_user_id",
        "table": "public.ratings"
      },
      {
        "name": "idx_store_applications_user_id",
        "table": "public.store_applications"
      },
      {
        "name": "idx_stores_owner_id",
        "table": "public.stores"
      },
      {
        "name": "idx_stores_store_application_id",
        "table": "public.stores"
      },
      {
        "name": "idx_tracking_pixels_active",
        "table": "public.tracking_pixels"
      },
      {
        "name": "idx_utm_exceptions_active",
        "table": "public.utm_tracking_exceptions"
      },
      {
        "name": "idx_utm_exceptions_domain",
        "table": "public.utm_tracking_exceptions"
      },
      {
        "name": "idx_utm_exceptions_store_id",
        "table": "public.utm_tracking_exceptions"
      },
      {
        "name": "ix_realtime_subscription_entity",
        "table": "realtime.subscription"
      },
      {
        "name": "subscription_subscription_id_entity_filters_key",
        "table": "realtime.subscription"
      },
      {
        "name": "bname",
        "table": "storage.buckets"
      },
      {
        "name": "bucketid_objname",
        "table": "storage.objects"
      },
      {
        "name": "idx_multipart_uploads_list",
        "table": "storage.s3_multipart_uploads"
      },
      {
        "name": "idx_objects_bucket_id_name",
        "table": "storage.objects"
      },
      {
        "name": "name_prefix_search",
        "table": "storage.objects"
      }
    ],
    "sequences": [
      {
        "name": "auth.refresh_tokens_id_seq"
      },
      {
        "name": "public.invoice_sequence"
      },
      {
        "name": "public.tracking_clicks_id_seq"
      }
    ],
    "views": [],
    "extensions": []
  },
  "extra": {
    "tables": [
      {
        "name": "storage_buckets_log",
        "definition": "\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  bucket_name TEXT NOT NULL,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  created_by UUID REFERENCES auth.users(id)\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "bucket_name",
            "type": "TEXT"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "created_by",
            "type": "UUID"
          }
        ]
      },
      {
        "name": "featured_products",
        "definition": "\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  store_id UUID NOT NULL REFERENCES stores(id),\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  price DECIMAL(10, 2) NOT NULL,\n  sale_price DECIMAL(10, 2),\n  image_url TEXT,\n  category VARCHAR(100),\n  tags TEXT[],\n  is_new BOOLEAN DEFAULT false,\n  is_featured BOOLEAN DEFAULT false,\n  is_on_sale BOOLEAN DEFAULT false,\n  stock_quantity INTEGER DEFAULT 0,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  start_date TIMESTAMP WITH TIME ZONE,\n  end_date TIMESTAMP WITH TIME ZONE,\n  status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'draft'))\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "store_id",
            "type": "UUID"
          },
          {
            "name": "name",
            "type": "VARCHAR(255)"
          },
          {
            "name": "description",
            "type": "TEXT"
          },
          {
            "name": "price",
            "type": "DECIMAL(10"
          },
          {
            "name": "sale_price",
            "type": "DECIMAL(10"
          },
          {
            "name": "image_url",
            "type": "TEXT"
          },
          {
            "name": "category",
            "type": "VARCHAR(100)"
          },
          {
            "name": "tags",
            "type": "TEXT[]"
          },
          {
            "name": "is_new",
            "type": "BOOLEAN"
          },
          {
            "name": "is_featured",
            "type": "BOOLEAN"
          },
          {
            "name": "is_on_sale",
            "type": "BOOLEAN"
          },
          {
            "name": "stock_quantity",
            "type": "INTEGER"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "updated_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "start_date",
            "type": "TIMESTAMP"
          },
          {
            "name": "end_date",
            "type": "TIMESTAMP"
          },
          {
            "name": "status",
            "type": "VARCHAR(20)"
          }
        ]
      },
      {
        "name": "public.outlet_products",
        "definition": "\r\n  id uuid primary key default gen_random_uuid(),\r\n  name text not null,\r\n  description text,\r\n  original_price decimal(10,2) not null,\r\n  outlet_price decimal(10,2) not null,\r\n  discount_percentage integer not null,\r\n  image_url text not null,\r\n  store_id uuid references stores(id) on delete cascade not null,\r\n  rating decimal(3,2) default 0,\r\n  review_count integer default 0,\r\n  is_featured boolean default false,\r\n  is_active boolean default true,\r\n  created_at timestamp with time zone default now(),\r\n  updated_at timestamp with time zone default now()\r\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "name",
            "type": "text"
          },
          {
            "name": "description",
            "type": "text"
          },
          {
            "name": "original_price",
            "type": "decimal(10"
          },
          {
            "name": "outlet_price",
            "type": "decimal(10"
          },
          {
            "name": "discount_percentage",
            "type": "integer"
          },
          {
            "name": "image_url",
            "type": "text"
          },
          {
            "name": "store_id",
            "type": "uuid"
          },
          {
            "name": "rating",
            "type": "decimal(3"
          },
          {
            "name": "review_count",
            "type": "integer"
          },
          {
            "name": "is_featured",
            "type": "boolean"
          },
          {
            "name": "is_active",
            "type": "boolean"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          }
        ]
      },
      {
        "name": "products",
        "definition": "\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  store_id UUID NOT NULL REFERENCES stores(id) ON DELETE CASCADE,\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  price DECIMAL(10, 2) NOT NULL,\n  sale_price DECIMAL(10, 2),\n  image_url TEXT,\n  category VARCHAR(100),\n  tags TEXT[],\n  is_new BOOLEAN DEFAULT true,\n  is_featured BOOLEAN DEFAULT false,\n  stock_quantity INTEGER DEFAULT 0,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  start_date TIMESTAMP WITH TIME ZONE,\n  end_date TIMESTAMP WITH TIME ZONE,\n  status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'draft'))\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "store_id",
            "type": "UUID"
          },
          {
            "name": "name",
            "type": "VARCHAR(255)"
          },
          {
            "name": "description",
            "type": "TEXT"
          },
          {
            "name": "price",
            "type": "DECIMAL(10"
          },
          {
            "name": "sale_price",
            "type": "DECIMAL(10"
          },
          {
            "name": "image_url",
            "type": "TEXT"
          },
          {
            "name": "category",
            "type": "VARCHAR(100)"
          },
          {
            "name": "tags",
            "type": "TEXT[]"
          },
          {
            "name": "is_new",
            "type": "BOOLEAN"
          },
          {
            "name": "is_featured",
            "type": "BOOLEAN"
          },
          {
            "name": "stock_quantity",
            "type": "INTEGER"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "updated_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "start_date",
            "type": "TIMESTAMP"
          },
          {
            "name": "end_date",
            "type": "TIMESTAMP"
          },
          {
            "name": "status",
            "type": "VARCHAR(20)"
          }
        ]
      },
      {
        "name": "script_pings",
        "definition": "\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    store_id UUID REFERENCES stores(id) ON DELETE CASCADE,\n    tracking_script_id UUID NOT NULL,\n    ping_timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    page_url TEXT,\n    user_agent TEXT,\n    ip_address INET,\n    script_version VARCHAR(20),\n    platform_detected VARCHAR(50),\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "store_id",
            "type": "UUID"
          },
          {
            "name": "tracking_script_id",
            "type": "UUID"
          },
          {
            "name": "ping_timestamp",
            "type": "TIMESTAMP"
          },
          {
            "name": "page_url",
            "type": "TEXT"
          },
          {
            "name": "user_agent",
            "type": "TEXT"
          },
          {
            "name": "ip_address",
            "type": "INET"
          },
          {
            "name": "script_version",
            "type": "VARCHAR(20)"
          },
          {
            "name": "platform_detected",
            "type": "VARCHAR(50)"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          }
        ]
      },
      {
        "name": "tracking_clicks",
        "definition": "\n    id BIGSERIAL PRIMARY KEY,\n    created_at TIMESTAMPTZ DEFAULT NOW(),\n    updated_at TIMESTAMPTZ DEFAULT NOW(),\n    \n    -- User information\n    user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,\n    session_id TEXT,\n    \n    -- UTM Parameters\n    utm_source TEXT,\n    utm_medium TEXT,\n    utm_campaign TEXT,\n    utm_content TEXT,\n    utm_term TEXT,\n    \n    -- Store and Coupon information\n    store_id BIGINT,\n    store_name TEXT,\n    coupon_code TEXT,\n    coupon_id BIGINT NOT NULL,\n    category TEXT,\n    \n    -- Discount information\n    discount_type TEXT,\n    discount_value DECIMAL(10,2),\n    \n    -- Affiliate information\n    affiliate_id TEXT,\n    \n    -- URLs\n    original_url TEXT NOT NULL,\n    tracked_url TEXT NOT NULL,\n    store_url TEXT,\n    \n    -- Client information\n    ip_address INET,\n    user_agent TEXT,\n    referrer TEXT,\n    device_type TEXT,\n    \n    -- Constraints\n    CONSTRAINT valid_discount_type CHECK (discount_type IN ('percentage', 'fixed', 'free_shipping', 'bogo', 'other') OR discount_type IS NULL),\n    CONSTRAINT valid_device_type CHECK (device_type IN ('mobile', 'tablet', 'desktop', 'unknown') OR device_type IS NULL)\n",
        "columns": [
          {
            "name": "id",
            "type": "BIGSERIAL"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMPTZ"
          },
          {
            "name": "updated_at",
            "type": "TIMESTAMPTZ"
          },
          {
            "name": "user_id",
            "type": "UUID"
          },
          {
            "name": "session_id",
            "type": "TEXT"
          },
          {
            "name": "utm_source",
            "type": "TEXT"
          },
          {
            "name": "utm_medium",
            "type": "TEXT"
          },
          {
            "name": "utm_campaign",
            "type": "TEXT"
          },
          {
            "name": "utm_content",
            "type": "TEXT"
          },
          {
            "name": "utm_term",
            "type": "TEXT"
          },
          {
            "name": "store_id",
            "type": "BIGINT"
          },
          {
            "name": "store_name",
            "type": "TEXT"
          },
          {
            "name": "coupon_code",
            "type": "TEXT"
          },
          {
            "name": "coupon_id",
            "type": "BIGINT"
          },
          {
            "name": "category",
            "type": "TEXT"
          },
          {
            "name": "discount_type",
            "type": "TEXT"
          },
          {
            "name": "discount_value",
            "type": "DECIMAL(10"
          },
          {
            "name": "affiliate_id",
            "type": "TEXT"
          },
          {
            "name": "original_url",
            "type": "TEXT"
          },
          {
            "name": "tracked_url",
            "type": "TEXT"
          },
          {
            "name": "store_url",
            "type": "TEXT"
          },
          {
            "name": "ip_address",
            "type": "INET"
          },
          {
            "name": "user_agent",
            "type": "TEXT"
          },
          {
            "name": "referrer",
            "type": "TEXT"
          },
          {
            "name": "device_type",
            "type": "TEXT"
          },
          {
            "name": "CONSTRAINT",
            "type": "valid_discount_type"
          },
          {
            "name": "CONSTRAINT",
            "type": "valid_device_type"
          }
        ]
      },
      {
        "name": "tracking_clicks",
        "definition": "\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  user_id UUID REFERENCES auth.users(id),\n  \n  -- Parámetros UTM estándar\n  utm_source TEXT,\n  utm_medium TEXT,\n  utm_campaign TEXT,\n  utm_content TEXT,\n  utm_term TEXT,\n  \n  -- Parámetros personalizados de Cuponomics\n  store_id TEXT,\n  store_name TEXT,\n  coupon_code TEXT,\n  coupon_id TEXT NOT NULL, -- Required field según tu validación\n  category TEXT,\n  discount_type TEXT,\n  discount_value TEXT,\n  affiliate_id TEXT,\n  \n  -- URLs\n  original_url TEXT NOT NULL, -- Required field según tu validación\n  tracked_url TEXT NOT NULL,  -- Required field según tu validación\n  store_url TEXT,\n  \n  -- Información del cliente\n  user_agent TEXT,\n  referrer TEXT,\n  ip_address TEXT,\n  session_id TEXT,\n  device_type TEXT,\n  \n  -- Metadatos\n  clicked_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "user_id",
            "type": "UUID"
          },
          {
            "name": "utm_source",
            "type": "TEXT"
          },
          {
            "name": "utm_medium",
            "type": "TEXT"
          },
          {
            "name": "utm_campaign",
            "type": "TEXT"
          },
          {
            "name": "utm_content",
            "type": "TEXT"
          },
          {
            "name": "utm_term",
            "type": "TEXT"
          },
          {
            "name": "store_id",
            "type": "TEXT"
          },
          {
            "name": "store_name",
            "type": "TEXT"
          },
          {
            "name": "coupon_code",
            "type": "TEXT"
          },
          {
            "name": "coupon_id",
            "type": "TEXT"
          },
          {
            "name": "category",
            "type": "TEXT"
          },
          {
            "name": "discount_type",
            "type": "TEXT"
          },
          {
            "name": "discount_value",
            "type": "TEXT"
          },
          {
            "name": "affiliate_id",
            "type": "TEXT"
          },
          {
            "name": "original_url",
            "type": "TEXT"
          },
          {
            "name": "tracked_url",
            "type": "TEXT"
          },
          {
            "name": "store_url",
            "type": "TEXT"
          },
          {
            "name": "user_agent",
            "type": "TEXT"
          },
          {
            "name": "referrer",
            "type": "TEXT"
          },
          {
            "name": "ip_address",
            "type": "TEXT"
          },
          {
            "name": "session_id",
            "type": "TEXT"
          },
          {
            "name": "device_type",
            "type": "TEXT"
          },
          {
            "name": "clicked_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          }
        ]
      },
      {
        "name": "tracking_conversions",
        "definition": "\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  tracking_click_id UUID REFERENCES tracking_clicks(id) ON DELETE CASCADE,\n  \n  -- Información de la conversión\n  conversion_value DECIMAL(10,2),\n  currency TEXT DEFAULT 'EUR',\n  commission_rate DECIMAL(5,4),\n  commission_amount DECIMAL(10,2),\n  \n  -- Estado de la conversión\n  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'cancelled', 'refunded')),\n  \n  -- Información adicional\n  order_id TEXT,\n  product_ids TEXT[],\n  \n  -- Metadatos\n  converted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  confirmed_at TIMESTAMP WITH TIME ZONE,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "tracking_click_id",
            "type": "UUID"
          },
          {
            "name": "conversion_value",
            "type": "DECIMAL(10"
          },
          {
            "name": "currency",
            "type": "TEXT"
          },
          {
            "name": "commission_rate",
            "type": "DECIMAL(5"
          },
          {
            "name": "commission_amount",
            "type": "DECIMAL(10"
          },
          {
            "name": "status",
            "type": "TEXT"
          },
          {
            "name": "order_id",
            "type": "TEXT"
          },
          {
            "name": "product_ids",
            "type": "TEXT[]"
          },
          {
            "name": "converted_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "confirmed_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          }
        ]
      },
      {
        "name": "tracking_conversions",
        "definition": "\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n    \n    -- Identificadores principales\n    owner_id UUID REFERENCES profiles(id) ON DELETE CASCADE,\n    store_id UUID REFERENCES stores(id) ON DELETE CASCADE,\n    -- Usamos BIGINT para que coincida con tracking_clicks.id\n    click_id BIGINT REFERENCES tracking_clicks(id) ON DELETE SET NULL,\n    \n    -- Datos de la conversión\n    conversion_type VARCHAR(50) DEFAULT 'purchase', -- purchase, lead, signup, etc.\n    conversion_value DECIMAL(10,2) NOT NULL, -- Valor de la venta\n    currency VARCHAR(3) DEFAULT 'EUR',\n    commission_rate DECIMAL(5,2) DEFAULT 5.00, -- Porcentaje de comisión\n    commission_amount DECIMAL(10,2) GENERATED ALWAYS AS (conversion_value * commission_rate / 100) STORED,\n    \n    -- Datos del producto/pedido\n    order_id VARCHAR(255), -- ID del pedido en la tienda externa\n    product_ids TEXT[], -- Array de IDs de productos\n    product_names TEXT[], -- Array de nombres de productos\n    quantity INTEGER DEFAULT 1,\n    \n    -- Datos UTM (heredados del click o nuevos)\n    utm_source VARCHAR(255),\n    utm_medium VARCHAR(255),\n    utm_campaign VARCHAR(255),\n    utm_content VARCHAR(255),\n    utm_term VARCHAR(255),\n    \n    -- Datos del cupón usado\n    coupon_id UUID REFERENCES coupons(id) ON DELETE SET NULL,\n    coupon_code VARCHAR(100),\n    discount_applied DECIMAL(10,2) DEFAULT 0,\n    \n    -- Datos de tracking\n    session_id VARCHAR(255),\n    user_agent TEXT,\n    ip_address INET,\n    referrer TEXT,\n    landing_page TEXT,\n    \n    -- Datos de la tienda externa\n    platform VARCHAR(50), -- shopify, woocommerce, magento, etc.\n    store_url TEXT,\n    checkout_url TEXT,\n    \n    -- Datos de verificación\n    status VARCHAR(20) DEFAULT 'pending', -- pending, confirmed, cancelled, refunded\n    verified_at TIMESTAMP WITH TIME ZONE,\n    verification_method VARCHAR(50), -- webhook, api, manual, pixel\n    \n    -- Datos adicionales\n    customer_email VARCHAR(255),\n    customer_id VARCHAR(255), -- ID del cliente en la tienda externa\n    is_new_customer BOOLEAN DEFAULT true,\n    \n    -- Timestamps\n    converted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    -- Constraint para evitar conversiones duplicadas por order_id\n    CONSTRAINT unique_order_per_store UNIQUE (store_id, order_id)\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "owner_id",
            "type": "UUID"
          },
          {
            "name": "store_id",
            "type": "UUID"
          },
          {
            "name": "click_id",
            "type": "BIGINT"
          },
          {
            "name": "conversion_type",
            "type": "VARCHAR(50)"
          },
          {
            "name": "conversion_value",
            "type": "DECIMAL(10"
          },
          {
            "name": "currency",
            "type": "VARCHAR(3)"
          },
          {
            "name": "commission_rate",
            "type": "DECIMAL(5"
          },
          {
            "name": "commission_amount",
            "type": "DECIMAL(10"
          },
          {
            "name": "order_id",
            "type": "VARCHAR(255)"
          },
          {
            "name": "product_ids",
            "type": "TEXT[]"
          },
          {
            "name": "product_names",
            "type": "TEXT[]"
          },
          {
            "name": "quantity",
            "type": "INTEGER"
          },
          {
            "name": "utm_source",
            "type": "VARCHAR(255)"
          },
          {
            "name": "utm_medium",
            "type": "VARCHAR(255)"
          },
          {
            "name": "utm_campaign",
            "type": "VARCHAR(255)"
          },
          {
            "name": "utm_content",
            "type": "VARCHAR(255)"
          },
          {
            "name": "utm_term",
            "type": "VARCHAR(255)"
          },
          {
            "name": "coupon_id",
            "type": "UUID"
          },
          {
            "name": "coupon_code",
            "type": "VARCHAR(100)"
          },
          {
            "name": "discount_applied",
            "type": "DECIMAL(10"
          },
          {
            "name": "session_id",
            "type": "VARCHAR(255)"
          },
          {
            "name": "user_agent",
            "type": "TEXT"
          },
          {
            "name": "ip_address",
            "type": "INET"
          },
          {
            "name": "referrer",
            "type": "TEXT"
          },
          {
            "name": "landing_page",
            "type": "TEXT"
          },
          {
            "name": "platform",
            "type": "VARCHAR(50)"
          },
          {
            "name": "store_url",
            "type": "TEXT"
          },
          {
            "name": "checkout_url",
            "type": "TEXT"
          },
          {
            "name": "status",
            "type": "VARCHAR(20)"
          },
          {
            "name": "verified_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "verification_method",
            "type": "VARCHAR(50)"
          },
          {
            "name": "customer_email",
            "type": "VARCHAR(255)"
          },
          {
            "name": "customer_id",
            "type": "VARCHAR(255)"
          },
          {
            "name": "is_new_customer",
            "type": "BOOLEAN"
          },
          {
            "name": "converted_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "updated_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "CONSTRAINT",
            "type": "unique_order_per_store"
          }
        ]
      },
      {
        "name": "tracking_conversions",
        "definition": "\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n    \n    -- Identificadores principales\n    owner_id UUID REFERENCES profiles(id) ON DELETE CASCADE,\n    store_id UUID REFERENCES stores(id) ON DELETE CASCADE,\n    click_id UUID REFERENCES tracking_clicks(id) ON DELETE SET NULL,\n    \n    -- Datos de la conversión\n    conversion_type VARCHAR(50) DEFAULT 'purchase', -- purchase, lead, signup, etc.\n    conversion_value DECIMAL(10,2) NOT NULL, -- Valor de la venta\n    currency VARCHAR(3) DEFAULT 'EUR',\n    commission_rate DECIMAL(5,2) DEFAULT 5.00, -- Porcentaje de comisión\n    commission_amount DECIMAL(10,2) GENERATED ALWAYS AS (conversion_value * commission_rate / 100) STORED,\n    \n    -- Datos del producto/pedido\n    order_id VARCHAR(255), -- ID del pedido en la tienda externa\n    product_ids TEXT[], -- Array de IDs de productos\n    product_names TEXT[], -- Array de nombres de productos\n    quantity INTEGER DEFAULT 1,\n    \n    -- Datos UTM (heredados del click o nuevos)\n    utm_source VARCHAR(255),\n    utm_medium VARCHAR(255),\n    utm_campaign VARCHAR(255),\n    utm_content VARCHAR(255),\n    utm_term VARCHAR(255),\n    \n    -- Datos del cupón usado\n    coupon_id UUID REFERENCES coupons(id) ON DELETE SET NULL,\n    coupon_code VARCHAR(100),\n    discount_applied DECIMAL(10,2) DEFAULT 0,\n    \n    -- Datos de tracking\n    session_id VARCHAR(255),\n    user_agent TEXT,\n    ip_address INET,\n    referrer TEXT,\n    landing_page TEXT,\n    \n    -- Datos de la tienda externa\n    platform VARCHAR(50), -- shopify, woocommerce, magento, etc.\n    store_url TEXT,\n    checkout_url TEXT,\n    \n    -- Datos de verificación\n    status VARCHAR(20) DEFAULT 'pending', -- pending, confirmed, cancelled, refunded\n    verified_at TIMESTAMP WITH TIME ZONE,\n    verification_method VARCHAR(50), -- webhook, api, manual, pixel\n    \n    -- Datos adicionales\n    customer_email VARCHAR(255),\n    customer_id VARCHAR(255), -- ID del cliente en la tienda externa\n    is_new_customer BOOLEAN DEFAULT true,\n    \n    -- Timestamps\n    converted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "owner_id",
            "type": "UUID"
          },
          {
            "name": "store_id",
            "type": "UUID"
          },
          {
            "name": "click_id",
            "type": "UUID"
          },
          {
            "name": "conversion_type",
            "type": "VARCHAR(50)"
          },
          {
            "name": "conversion_value",
            "type": "DECIMAL(10"
          },
          {
            "name": "currency",
            "type": "VARCHAR(3)"
          },
          {
            "name": "commission_rate",
            "type": "DECIMAL(5"
          },
          {
            "name": "commission_amount",
            "type": "DECIMAL(10"
          },
          {
            "name": "order_id",
            "type": "VARCHAR(255)"
          },
          {
            "name": "product_ids",
            "type": "TEXT[]"
          },
          {
            "name": "product_names",
            "type": "TEXT[]"
          },
          {
            "name": "quantity",
            "type": "INTEGER"
          },
          {
            "name": "utm_source",
            "type": "VARCHAR(255)"
          },
          {
            "name": "utm_medium",
            "type": "VARCHAR(255)"
          },
          {
            "name": "utm_campaign",
            "type": "VARCHAR(255)"
          },
          {
            "name": "utm_content",
            "type": "VARCHAR(255)"
          },
          {
            "name": "utm_term",
            "type": "VARCHAR(255)"
          },
          {
            "name": "coupon_id",
            "type": "UUID"
          },
          {
            "name": "coupon_code",
            "type": "VARCHAR(100)"
          },
          {
            "name": "discount_applied",
            "type": "DECIMAL(10"
          },
          {
            "name": "session_id",
            "type": "VARCHAR(255)"
          },
          {
            "name": "user_agent",
            "type": "TEXT"
          },
          {
            "name": "ip_address",
            "type": "INET"
          },
          {
            "name": "referrer",
            "type": "TEXT"
          },
          {
            "name": "landing_page",
            "type": "TEXT"
          },
          {
            "name": "platform",
            "type": "VARCHAR(50)"
          },
          {
            "name": "store_url",
            "type": "TEXT"
          },
          {
            "name": "checkout_url",
            "type": "TEXT"
          },
          {
            "name": "status",
            "type": "VARCHAR(20)"
          },
          {
            "name": "verified_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "verification_method",
            "type": "VARCHAR(50)"
          },
          {
            "name": "customer_email",
            "type": "VARCHAR(255)"
          },
          {
            "name": "customer_id",
            "type": "VARCHAR(255)"
          },
          {
            "name": "is_new_customer",
            "type": "BOOLEAN"
          },
          {
            "name": "converted_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "updated_at",
            "type": "TIMESTAMP"
          }
        ]
      },
      {
        "name": "tracking_pixels",
        "definition": "\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n    \n    -- Identificadores\n    owner_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,\n    store_id UUID REFERENCES stores(id) ON DELETE CASCADE NOT NULL,\n    \n    -- Configuración del píxel\n    pixel_name VARCHAR(255) NOT NULL,\n    pixel_id VARCHAR(100) UNIQUE NOT NULL, -- ID público del píxel (ej: px_1234567890)\n    \n    -- Configuración de comisiones\n    commission_rate DECIMAL(5,2) DEFAULT 5.00, -- Porcentaje de comisión\n    currency VARCHAR(3) DEFAULT 'EUR',\n    \n    -- URLs y configuración\n    store_url TEXT NOT NULL,\n    checkout_patterns TEXT[] DEFAULT ARRAY['/checkout/success', '/order-received', '/thank-you', '/order-complete'], -- Patrones de URLs de éxito\n    platform VARCHAR(50), -- shopify, woocommerce, magento, prestashop, etc.\n    \n    -- Configuración avanzada\n    auto_detect_conversions BOOLEAN DEFAULT true,\n    track_page_views BOOLEAN DEFAULT true,\n    track_add_to_cart BOOLEAN DEFAULT false,\n    \n    -- Estado\n    is_active BOOLEAN DEFAULT true,\n    is_verified BOOLEAN DEFAULT false, -- Si el píxel está correctamente instalado\n    last_activity_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Estadísticas básicas\n    total_conversions INTEGER DEFAULT 0,\n    total_revenue DECIMAL(12,2) DEFAULT 0,\n    total_commission DECIMAL(12,2) DEFAULT 0,\n    \n    -- Timestamps\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    -- Constraints\n    CONSTRAINT unique_pixel_per_store UNIQUE (store_id, pixel_name)\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "owner_id",
            "type": "UUID"
          },
          {
            "name": "store_id",
            "type": "UUID"
          },
          {
            "name": "pixel_name",
            "type": "VARCHAR(255)"
          },
          {
            "name": "pixel_id",
            "type": "VARCHAR(100)"
          },
          {
            "name": "commission_rate",
            "type": "DECIMAL(5"
          },
          {
            "name": "currency",
            "type": "VARCHAR(3)"
          },
          {
            "name": "store_url",
            "type": "TEXT"
          },
          {
            "name": "checkout_patterns",
            "type": "TEXT[]"
          },
          {
            "name": "platform",
            "type": "VARCHAR(50)"
          },
          {
            "name": "auto_detect_conversions",
            "type": "BOOLEAN"
          },
          {
            "name": "track_page_views",
            "type": "BOOLEAN"
          },
          {
            "name": "track_add_to_cart",
            "type": "BOOLEAN"
          },
          {
            "name": "is_active",
            "type": "BOOLEAN"
          },
          {
            "name": "is_verified",
            "type": "BOOLEAN"
          },
          {
            "name": "last_activity_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "total_conversions",
            "type": "INTEGER"
          },
          {
            "name": "total_revenue",
            "type": "DECIMAL(12"
          },
          {
            "name": "total_commission",
            "type": "DECIMAL(12"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "updated_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "CONSTRAINT",
            "type": "unique_pixel_per_store"
          }
        ]
      },
      {
        "name": "featured_products",
        "definition": "\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  store_id UUID NOT NULL REFERENCES stores(id) ON DELETE CASCADE,\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  price DECIMAL(10, 2) NOT NULL,\n  sale_price DECIMAL(10, 2),\n  image_url TEXT,\n  category VARCHAR(100),\n  tags TEXT[],\n  is_new BOOLEAN DEFAULT TRUE,\n  is_featured BOOLEAN DEFAULT FALSE,\n  stock_quantity INTEGER DEFAULT 0,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  start_date TIMESTAMP WITH TIME ZONE,\n  end_date TIMESTAMP WITH TIME ZONE,\n  status VARCHAR(50) DEFAULT 'active'\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "store_id",
            "type": "UUID"
          },
          {
            "name": "name",
            "type": "VARCHAR(255)"
          },
          {
            "name": "description",
            "type": "TEXT"
          },
          {
            "name": "price",
            "type": "DECIMAL(10"
          },
          {
            "name": "sale_price",
            "type": "DECIMAL(10"
          },
          {
            "name": "image_url",
            "type": "TEXT"
          },
          {
            "name": "category",
            "type": "VARCHAR(100)"
          },
          {
            "name": "tags",
            "type": "TEXT[]"
          },
          {
            "name": "is_new",
            "type": "BOOLEAN"
          },
          {
            "name": "is_featured",
            "type": "BOOLEAN"
          },
          {
            "name": "stock_quantity",
            "type": "INTEGER"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "updated_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "start_date",
            "type": "TIMESTAMP"
          },
          {
            "name": "end_date",
            "type": "TIMESTAMP"
          },
          {
            "name": "status",
            "type": "VARCHAR(50)"
          }
        ]
      },
      {
        "name": "product_stats",
        "definition": "\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  product_id UUID REFERENCES featured_products(id) NOT NULL,\n  views INTEGER DEFAULT 0,\n  clicks INTEGER DEFAULT 0,\n  conversions INTEGER DEFAULT 0,\n  last_updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "product_id",
            "type": "UUID"
          },
          {
            "name": "views",
            "type": "INTEGER"
          },
          {
            "name": "clicks",
            "type": "INTEGER"
          },
          {
            "name": "conversions",
            "type": "INTEGER"
          },
          {
            "name": "last_updated",
            "type": "TIMESTAMP"
          }
        ]
      },
      {
        "name": "tracking_clicks",
        "definition": "\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  user_id UUID REFERENCES auth.users(id),\n  \n  -- Parámetros UTM estándar\n  utm_source TEXT,\n  utm_medium TEXT,\n  utm_campaign TEXT,\n  utm_content TEXT,\n  utm_term TEXT,\n  \n  -- Parámetros personalizados de Cuponomics\n  store_id TEXT, -- Cambiado de UUID a TEXT para mayor flexibilidad\n  store_name TEXT,\n  coupon_code TEXT,\n  coupon_id TEXT, -- Cambiado de UUID a TEXT\n  category TEXT,\n  discount_type TEXT,\n  discount_value TEXT,\n  affiliate_id TEXT,\n  \n  -- Información del clic\n  original_url TEXT NOT NULL,\n  tracked_url TEXT NOT NULL,\n  user_agent TEXT,\n  referrer TEXT,\n  ip_address TEXT, -- Cambiado de INET a TEXT para compatibilidad\n  \n  -- Datos adicionales como JSON\n  additional_data JSONB,\n  \n  -- Metadatos\n  clicked_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "user_id",
            "type": "UUID"
          },
          {
            "name": "utm_source",
            "type": "TEXT"
          },
          {
            "name": "utm_medium",
            "type": "TEXT"
          },
          {
            "name": "utm_campaign",
            "type": "TEXT"
          },
          {
            "name": "utm_content",
            "type": "TEXT"
          },
          {
            "name": "utm_term",
            "type": "TEXT"
          },
          {
            "name": "store_id",
            "type": "TEXT"
          },
          {
            "name": "store_name",
            "type": "TEXT"
          },
          {
            "name": "coupon_code",
            "type": "TEXT"
          },
          {
            "name": "coupon_id",
            "type": "TEXT"
          },
          {
            "name": "category",
            "type": "TEXT"
          },
          {
            "name": "discount_type",
            "type": "TEXT"
          },
          {
            "name": "discount_value",
            "type": "TEXT"
          },
          {
            "name": "affiliate_id",
            "type": "TEXT"
          },
          {
            "name": "original_url",
            "type": "TEXT"
          },
          {
            "name": "tracked_url",
            "type": "TEXT"
          },
          {
            "name": "user_agent",
            "type": "TEXT"
          },
          {
            "name": "referrer",
            "type": "TEXT"
          },
          {
            "name": "ip_address",
            "type": "TEXT"
          },
          {
            "name": "additional_data",
            "type": "JSONB"
          },
          {
            "name": "clicked_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          }
        ]
      },
      {
        "name": "tracking_conversions",
        "definition": "\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  tracking_click_id UUID REFERENCES tracking_clicks(id),\n  \n  -- Información de la conversión\n  conversion_value DECIMAL(10,2),\n  currency TEXT DEFAULT 'EUR',\n  commission_rate DECIMAL(5,4),\n  commission_amount DECIMAL(10,2),\n  \n  -- Estado de la conversión\n  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'cancelled', 'refunded')),\n  \n  -- Información adicional\n  order_id TEXT,\n  product_ids TEXT[],\n  \n  -- Metadatos\n  converted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  confirmed_at TIMESTAMP WITH TIME ZONE,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "tracking_click_id",
            "type": "UUID"
          },
          {
            "name": "conversion_value",
            "type": "DECIMAL(10"
          },
          {
            "name": "currency",
            "type": "TEXT"
          },
          {
            "name": "commission_rate",
            "type": "DECIMAL(5"
          },
          {
            "name": "commission_amount",
            "type": "DECIMAL(10"
          },
          {
            "name": "status",
            "type": "TEXT"
          },
          {
            "name": "order_id",
            "type": "TEXT"
          },
          {
            "name": "product_ids",
            "type": "TEXT[]"
          },
          {
            "name": "converted_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "confirmed_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          }
        ]
      },
      {
        "name": "payment_reminders",
        "definition": "\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  merchant_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n  commission_amount DECIMAL(10,2) NOT NULL,\n  period_start DATE NOT NULL,\n  period_end DATE NOT NULL,\n  due_date DATE NOT NULL,\n  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'sent', 'paid', 'overdue', 'cancelled')),\n  reminder_count INTEGER DEFAULT 0,\n  last_reminder_sent TIMESTAMP WITH TIME ZONE,\n  payment_method TEXT DEFAULT 'paypal' CHECK (payment_method IN ('paypal', 'stripe', 'bank_transfer')),\n  merchant_email TEXT NOT NULL,\n  merchant_name TEXT,\n  invoice_number TEXT UNIQUE,\n  notes TEXT,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "merchant_id",
            "type": "UUID"
          },
          {
            "name": "commission_amount",
            "type": "DECIMAL(10"
          },
          {
            "name": "period_start",
            "type": "DATE"
          },
          {
            "name": "period_end",
            "type": "DATE"
          },
          {
            "name": "due_date",
            "type": "DATE"
          },
          {
            "name": "status",
            "type": "TEXT"
          },
          {
            "name": "reminder_count",
            "type": "INTEGER"
          },
          {
            "name": "last_reminder_sent",
            "type": "TIMESTAMP"
          },
          {
            "name": "payment_method",
            "type": "TEXT"
          },
          {
            "name": "merchant_email",
            "type": "TEXT"
          },
          {
            "name": "merchant_name",
            "type": "TEXT"
          },
          {
            "name": "invoice_number",
            "type": "TEXT"
          },
          {
            "name": "notes",
            "type": "TEXT"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "updated_at",
            "type": "TIMESTAMP"
          }
        ]
      },
      {
        "name": "public.outlet_products",
        "definition": "\r\n  id uuid primary key default gen_random_uuid(),\r\n  name text not null,\r\n  description text,\r\n  original_price decimal(10,2) not null,\r\n  outlet_price decimal(10,2) not null,\r\n  discount_percentage integer not null,\r\n  image_url text not null,\r\n  store_id uuid references stores(id) on delete cascade not null,\r\n  rating decimal(3,2) default 0,\r\n  review_count integer default 0,\r\n  is_featured boolean default false,\r\n  is_active boolean default true,\r\n  created_at timestamp with time zone default now(),\r\n  updated_at timestamp with time zone default now()\r\n",
        "columns": [
          {
            "name": "id",
            "type": "uuid"
          },
          {
            "name": "name",
            "type": "text"
          },
          {
            "name": "description",
            "type": "text"
          },
          {
            "name": "original_price",
            "type": "decimal(10"
          },
          {
            "name": "outlet_price",
            "type": "decimal(10"
          },
          {
            "name": "discount_percentage",
            "type": "integer"
          },
          {
            "name": "image_url",
            "type": "text"
          },
          {
            "name": "store_id",
            "type": "uuid"
          },
          {
            "name": "rating",
            "type": "decimal(3"
          },
          {
            "name": "review_count",
            "type": "integer"
          },
          {
            "name": "is_featured",
            "type": "boolean"
          },
          {
            "name": "is_active",
            "type": "boolean"
          },
          {
            "name": "created_at",
            "type": "timestamp"
          },
          {
            "name": "updated_at",
            "type": "timestamp"
          }
        ]
      },
      {
        "name": "store_images",
        "definition": "\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  store_id UUID NOT NULL REFERENCES stores(id) ON DELETE CASCADE,\n  image_url TEXT NOT NULL,\n  description TEXT,\n  is_featured BOOLEAN DEFAULT false,\n  display_order INT DEFAULT 0,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "store_id",
            "type": "UUID"
          },
          {
            "name": "image_url",
            "type": "TEXT"
          },
          {
            "name": "description",
            "type": "TEXT"
          },
          {
            "name": "is_featured",
            "type": "BOOLEAN"
          },
          {
            "name": "display_order",
            "type": "INT"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "updated_at",
            "type": "TIMESTAMP"
          }
        ]
      },
      {
        "name": "subscription_plans",
        "definition": "\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  name TEXT NOT NULL,\n  description TEXT NOT NULL,\n  price DECIMAL(10,2) NOT NULL,\n  interval TEXT NOT NULL, -- 'monthly', 'yearly'\n  features JSONB NOT NULL,\n  stripe_price_id TEXT NOT NULL,\n  is_active BOOLEAN DEFAULT TRUE,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "name",
            "type": "TEXT"
          },
          {
            "name": "description",
            "type": "TEXT"
          },
          {
            "name": "price",
            "type": "DECIMAL(10"
          },
          {
            "name": "interval",
            "type": "TEXT"
          },
          {
            "name": "features",
            "type": "JSONB"
          },
          {
            "name": "stripe_price_id",
            "type": "TEXT"
          },
          {
            "name": "is_active",
            "type": "BOOLEAN"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "updated_at",
            "type": "TIMESTAMP"
          }
        ]
      },
      {
        "name": "user_subscriptions",
        "definition": "\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  user_id UUID REFERENCES auth.users(id) NOT NULL,\n  plan_id UUID REFERENCES subscription_plans(id) NOT NULL,\n  stripe_customer_id TEXT NOT NULL,\n  stripe_subscription_id TEXT NOT NULL,\n  status TEXT NOT NULL, -- 'active', 'canceled', 'past_due', 'trialing'\n  current_period_start TIMESTAMP WITH TIME ZONE NOT NULL,\n  current_period_end TIMESTAMP WITH TIME ZONE NOT NULL,\n  cancel_at_period_end BOOLEAN DEFAULT FALSE,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "user_id",
            "type": "UUID"
          },
          {
            "name": "plan_id",
            "type": "UUID"
          },
          {
            "name": "stripe_customer_id",
            "type": "TEXT"
          },
          {
            "name": "stripe_subscription_id",
            "type": "TEXT"
          },
          {
            "name": "status",
            "type": "TEXT"
          },
          {
            "name": "current_period_start",
            "type": "TIMESTAMP"
          },
          {
            "name": "current_period_end",
            "type": "TIMESTAMP"
          },
          {
            "name": "cancel_at_period_end",
            "type": "BOOLEAN"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "updated_at",
            "type": "TIMESTAMP"
          }
        ]
      },
      {
        "name": "subscription_payments",
        "definition": "\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  user_id UUID REFERENCES auth.users(id) NOT NULL,\n  subscription_id UUID REFERENCES user_subscriptions(id) NOT NULL,\n  stripe_invoice_id TEXT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status TEXT NOT NULL, -- 'paid', 'pending', 'failed'\n  payment_date TIMESTAMP WITH TIME ZONE NOT NULL,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "user_id",
            "type": "UUID"
          },
          {
            "name": "subscription_id",
            "type": "UUID"
          },
          {
            "name": "stripe_invoice_id",
            "type": "TEXT"
          },
          {
            "name": "amount",
            "type": "DECIMAL(10"
          },
          {
            "name": "status",
            "type": "TEXT"
          },
          {
            "name": "payment_date",
            "type": "TIMESTAMP"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          }
        ]
      },
      {
        "name": "tracking_clicks",
        "definition": "\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  user_id UUID REFERENCES auth.users(id),\n  \n  -- Parámetros UTM estándar\n  utm_source TEXT,\n  utm_medium TEXT,\n  utm_campaign TEXT,\n  utm_content TEXT,\n  utm_term TEXT,\n  \n  -- Parámetros personalizados de Cuponomics\n  store_id UUID,\n  store_name TEXT,\n  coupon_code TEXT,\n  coupon_id UUID,\n  category TEXT,\n  discount_type TEXT,\n  discount_value TEXT,\n  affiliate_id TEXT,\n  \n  -- Información del clic\n  original_url TEXT NOT NULL,\n  tracked_url TEXT NOT NULL,\n  user_agent TEXT,\n  referrer TEXT,\n  ip_address INET,\n  \n  -- Metadatos\n  clicked_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  \n  -- Índices para consultas rápidas\n  INDEX idx_tracking_clicks_user_id (user_id),\n  INDEX idx_tracking_clicks_store_id (store_id),\n  INDEX idx_tracking_clicks_coupon_id (coupon_id),\n  INDEX idx_tracking_clicks_utm_campaign (utm_campaign),\n  INDEX idx_tracking_clicks_clicked_at (clicked_at)\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "user_id",
            "type": "UUID"
          },
          {
            "name": "utm_source",
            "type": "TEXT"
          },
          {
            "name": "utm_medium",
            "type": "TEXT"
          },
          {
            "name": "utm_campaign",
            "type": "TEXT"
          },
          {
            "name": "utm_content",
            "type": "TEXT"
          },
          {
            "name": "utm_term",
            "type": "TEXT"
          },
          {
            "name": "store_id",
            "type": "UUID"
          },
          {
            "name": "store_name",
            "type": "TEXT"
          },
          {
            "name": "coupon_code",
            "type": "TEXT"
          },
          {
            "name": "coupon_id",
            "type": "UUID"
          },
          {
            "name": "category",
            "type": "TEXT"
          },
          {
            "name": "discount_type",
            "type": "TEXT"
          },
          {
            "name": "discount_value",
            "type": "TEXT"
          },
          {
            "name": "affiliate_id",
            "type": "TEXT"
          },
          {
            "name": "original_url",
            "type": "TEXT"
          },
          {
            "name": "tracked_url",
            "type": "TEXT"
          },
          {
            "name": "user_agent",
            "type": "TEXT"
          },
          {
            "name": "referrer",
            "type": "TEXT"
          },
          {
            "name": "ip_address",
            "type": "INET"
          },
          {
            "name": "clicked_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "INDEX",
            "type": "idx_tracking_clicks_user_id"
          },
          {
            "name": "INDEX",
            "type": "idx_tracking_clicks_store_id"
          },
          {
            "name": "INDEX",
            "type": "idx_tracking_clicks_coupon_id"
          },
          {
            "name": "INDEX",
            "type": "idx_tracking_clicks_utm_campaign"
          },
          {
            "name": "INDEX",
            "type": "idx_tracking_clicks_clicked_at"
          }
        ]
      },
      {
        "name": "tracking_conversions",
        "definition": "\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  tracking_click_id UUID REFERENCES tracking_clicks(id),\n  \n  -- Información de la conversión\n  conversion_value DECIMAL(10,2),\n  currency TEXT DEFAULT 'EUR',\n  commission_rate DECIMAL(5,4), -- Porcentaje de comisión (ej: 0.05 = 5%)\n  commission_amount DECIMAL(10,2),\n  \n  -- Estado de la conversión\n  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'cancelled', 'refunded')),\n  \n  -- Información adicional\n  order_id TEXT,\n  product_ids TEXT[], -- Array de IDs de productos comprados\n  \n  -- Metadatos\n  converted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  confirmed_at TIMESTAMP WITH TIME ZONE,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  \n  -- Índices\n  INDEX idx_tracking_conversions_click_id (tracking_click_id),\n  INDEX idx_tracking_conversions_status (status),\n  INDEX idx_tracking_conversions_converted_at (converted_at)\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "tracking_click_id",
            "type": "UUID"
          },
          {
            "name": "conversion_value",
            "type": "DECIMAL(10"
          },
          {
            "name": "currency",
            "type": "TEXT"
          },
          {
            "name": "commission_rate",
            "type": "DECIMAL(5"
          },
          {
            "name": "commission_amount",
            "type": "DECIMAL(10"
          },
          {
            "name": "status",
            "type": "TEXT"
          },
          {
            "name": "order_id",
            "type": "TEXT"
          },
          {
            "name": "product_ids",
            "type": "TEXT[]"
          },
          {
            "name": "converted_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "confirmed_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "INDEX",
            "type": "idx_tracking_conversions_click_id"
          },
          {
            "name": "INDEX",
            "type": "idx_tracking_conversions_status"
          },
          {
            "name": "INDEX",
            "type": "idx_tracking_conversions_converted_at"
          }
        ]
      },
      {
        "name": "utm_tracking_exceptions",
        "definition": "\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  store_id UUID REFERENCES stores(id) ON DELETE CASCADE,\n  store_name TEXT NOT NULL,\n  domain TEXT NOT NULL, -- Dominio de la tienda (ej: amazon.com, aliexpress.com)\n  reason TEXT, -- Razón de la excepción (ej: \"Programa de afiliados propio\")\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  \n  -- Índices para consultas rápidas\n  INDEX idx_utm_exceptions_store_id (store_id),\n  INDEX idx_utm_exceptions_domain (domain),\n  INDEX idx_utm_exceptions_active (is_active)\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "store_id",
            "type": "UUID"
          },
          {
            "name": "store_name",
            "type": "TEXT"
          },
          {
            "name": "domain",
            "type": "TEXT"
          },
          {
            "name": "reason",
            "type": "TEXT"
          },
          {
            "name": "is_active",
            "type": "BOOLEAN"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "updated_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "INDEX",
            "type": "idx_utm_exceptions_store_id"
          },
          {
            "name": "INDEX",
            "type": "idx_utm_exceptions_domain"
          },
          {
            "name": "INDEX",
            "type": "idx_utm_exceptions_active"
          }
        ]
      },
      {
        "name": "coupons",
        "definition": "\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  store_id UUID NOT NULL REFERENCES stores(id) ON DELETE CASCADE,\n  title VARCHAR(255) NOT NULL,\n  description TEXT,\n  code VARCHAR(50),\n  discount_value NUMERIC,\n  discount_type VARCHAR(20) CHECK (discount_type IN ('percentage', 'fixed', 'free_shipping', 'bogo', 'other')),\n  start_date TIMESTAMP WITH TIME ZONE,\n  expiry_date TIMESTAMP WITH TIME ZONE,\n  terms_conditions TEXT,\n  coupon_type VARCHAR(20) NOT NULL CHECK (coupon_type IN ('code', 'deal', 'free_shipping')),\n  is_verified BOOLEAN DEFAULT false,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "store_id",
            "type": "UUID"
          },
          {
            "name": "title",
            "type": "VARCHAR(255)"
          },
          {
            "name": "description",
            "type": "TEXT"
          },
          {
            "name": "code",
            "type": "VARCHAR(50)"
          },
          {
            "name": "discount_value",
            "type": "NUMERIC"
          },
          {
            "name": "discount_type",
            "type": "VARCHAR(20)"
          },
          {
            "name": "start_date",
            "type": "TIMESTAMP"
          },
          {
            "name": "expiry_date",
            "type": "TIMESTAMP"
          },
          {
            "name": "terms_conditions",
            "type": "TEXT"
          },
          {
            "name": "coupon_type",
            "type": "VARCHAR(20)"
          },
          {
            "name": "is_verified",
            "type": "BOOLEAN"
          },
          {
            "name": "is_active",
            "type": "BOOLEAN"
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP"
          },
          {
            "name": "updated_at",
            "type": "TIMESTAMP"
          }
        ]
      },
      {
        "name": "coupon_stats",
        "definition": "\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  coupon_id UUID NOT NULL REFERENCES coupons(id) ON DELETE CASCADE,\n  views INTEGER DEFAULT 0,\n  clicks INTEGER DEFAULT 0,\n  conversions INTEGER DEFAULT 0,\n  last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n",
        "columns": [
          {
            "name": "id",
            "type": "UUID"
          },
          {
            "name": "coupon_id",
            "type": "UUID"
          },
          {
            "name": "views",
            "type": "INTEGER"
          },
          {
            "name": "clicks",
            "type": "INTEGER"
          },
          {
            "name": "conversions",
            "type": "INTEGER"
          },
          {
            "name": "last_updated",
            "type": "TIMESTAMP"
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "create_store_from_application",
        "parameters": "",
        "returnType": "TRIGGER",
        "definition": "BEGIN\n    INSERT INTO stores (\n        owner_id,\n        name,\n        slug,\n        description,\n        website,\n        logo_url,\n        card_image_url,\n        category,\n        contact_email,\n        contact_phone,\n        address,\n        is_active,\n        store_application_id\n    ) VALUES (\n        NEW.user_id,\n        NEW.store_name,\n        lower(regexp_replace(NEW.store_name, '[^a-zA-Z0-9]', '-', 'g')),\n        NEW.description,\n        NEW.website,\n        NEW.logo_url,\n        NEW.card_image_url,\n        NEW.category,\n        NEW.contact_email,\n        NEW.contact_phone,\n        NEW.address,\n        true,\n        NEW.id\n    );\n    RETURN NEW;\nEND;"
      },
      {
        "name": "get_schemas",
        "parameters": "",
        "returnType": "TABLE (\r\n  schema_name text,\r\n  schema_owner text,\r\n  default_character_set_name text,\r\n  default_collation_name text\r\n) \r\nLANGUAGE sql\r\nSECURITY DEFINER\r\nAS $$\r\n  SELECT \r\n    n.nspname as schema_name,\r\n    pg_get_userbyid(n.nspowner) as schema_owner,\r\n    NULL as default_character_set_name,\r\n    NULL as default_collation_name\r\n  FROM pg_namespace n\r\n  WHERE n.nspname NOT IN ('information_schema', 'pg_catalog', 'pg_toast')\r\n  AND n.nspname NOT LIKE 'pg_%'\r\n  ORDER BY n.nspname;\r\n$$;\r\n\r\n-- Función para obtener información detallada de tablas\r\nCREATE OR REPLACE FUNCTION get_tables_info()\r\nRETURNS TABLE (\r\n  table_schema text,\r\n  table_name text,\r\n  table_type text,\r\n  table_owner text,\r\n  row_count bigint,\r\n  table_size text,\r\n  index_size text,\r\n  total_size text,\r\n  columns jsonb\r\n) \r\nLANGUAGE plpgsql\r\nSECURITY DEFINER\r\nAS $$\r\nBEGIN\r\n  RETURN QUERY\r\n  SELECT \r\n    t.table_schema,\r\n    t.table_name,\r\n    t.table_type,\r\n    pg_get_userbyid(c.relowner) as table_owner,\r\n    CASE \r\n      WHEN c.reltuples >= 0 THEN c.reltuples::bigint\r\n      ELSE 0\r\n    END as row_count,\r\n    pg_size_pretty(pg_total_relation_size(c.oid)) as table_size,\r\n    pg_size_pretty(pg_indexes_size(c.oid)) as index_size,\r\n    pg_size_pretty(pg_total_relation_size(c.oid)) as total_size,\r\n    COALESCE(\r\n      (SELECT jsonb_agg(\r\n        jsonb_build_object(\r\n          'column_name', col.column_name,\r\n          'data_type', col.data_type,\r\n          'is_nullable', col.is_nullable,\r\n          'column_default', col.column_default,\r\n          'character_maximum_length', col.character_maximum_length\r\n        )\r\n      )\r\n      FROM information_schema.columns col\r\n      WHERE col.table_schema = t.table_schema \r\n      AND col.table_name = t.table_name\r\n      ORDER BY col.ordinal_position), \r\n      '[]'::jsonb\r\n    ) as columns\r\n  FROM information_schema.tables t\r\n  JOIN pg_class c ON c.relname = t.table_name\r\n  JOIN pg_namespace n ON n.nspname = t.table_schema AND c.relnamespace = n.oid\r\n  WHERE t.table_schema NOT IN ('information_schema', 'pg_catalog')\r\n  AND t.table_type = 'BASE TABLE'\r\n  ORDER BY t.table_schema, t.table_name;\r\nEND;\r\n$$;\r\n\r\n-- Función para obtener funciones\r\nCREATE OR REPLACE FUNCTION get_functions()\r\nRETURNS TABLE (\r\n  function_schema text,\r\n  function_name text,\r\n  function_owner text,\r\n  function_type text,\r\n  return_type text,\r\n  argument_types text,\r\n  function_definition text,\r\n  is_security_definer boolean\r\n) \r\nLANGUAGE sql\r\nSECURITY DEFINER\r\nAS $$\r\n  SELECT \r\n    n.nspname as function_schema,\r\n    p.proname as function_name,\r\n    pg_get_userbyid(p.proowner) as function_owner,\r\n    CASE p.prokind\r\n      WHEN 'f' THEN 'function'\r\n      WHEN 'p' THEN 'procedure'\r\n      WHEN 'a' THEN 'aggregate'\r\n      WHEN 'w' THEN 'window'\r\n      ELSE 'unknown'\r\n    END as function_type,\r\n    pg_get_function_result(p.oid) as return_type,\r\n    pg_get_function_arguments(p.oid) as argument_types,\r\n    pg_get_functiondef(p.oid) as function_definition,\r\n    p.prosecdef as is_security_definer\r\n  FROM pg_proc p\r\n  JOIN pg_namespace n ON p.pronamespace = n.oid\r\n  WHERE n.nspname NOT IN ('information_schema', 'pg_catalog')\r\n  AND n.nspname NOT LIKE 'pg_%'\r\n  ORDER BY n.nspname, p.proname;\r\n$$;\r\n\r\n-- Función para obtener triggers\r\nCREATE OR REPLACE FUNCTION get_triggers()\r\nRETURNS TABLE (\r\n  trigger_schema text,\r\n  trigger_name text,\r\n  table_schema text,\r\n  table_name text,\r\n  trigger_type text,\r\n  trigger_timing text,\r\n  trigger_orientation text,\r\n  trigger_definition text\r\n) \r\nLANGUAGE sql\r\nSECURITY DEFINER\r\nAS $$\r\n  SELECT \r\n    n.nspname as trigger_schema,\r\n    t.tgname as trigger_name,\r\n    nt.nspname as table_schema,\r\n    ct.relname as table_name,\r\n    CASE t.tgtype & 66\r\n      WHEN 2 THEN 'BEFORE'\r\n      WHEN 64 THEN 'INSTEAD OF'\r\n      ELSE 'AFTER'\r\n    END as trigger_type,\r\n    CASE t.tgtype & 28\r\n      WHEN 4 THEN 'INSERT'\r\n      WHEN 8 THEN 'DELETE'\r\n      WHEN 16 THEN 'UPDATE'\r\n      WHEN 12 THEN 'INSERT OR DELETE'\r\n      WHEN 20 THEN 'INSERT OR UPDATE'\r\n      WHEN 24 THEN 'DELETE OR UPDATE'\r\n      WHEN 28 THEN 'INSERT OR DELETE OR UPDATE'\r\n    END as trigger_timing,\r\n    CASE t.tgtype & 1\r\n      WHEN 1 THEN 'ROW'\r\n      ELSE 'STATEMENT'\r\n    END as trigger_orientation,\r\n    pg_get_triggerdef(t.oid) as trigger_definition\r\n  FROM pg_trigger t\r\n  JOIN pg_class ct ON t.tgrelid = ct.oid\r\n  JOIN pg_namespace nt ON ct.relnamespace = nt.oid\r\n  JOIN pg_namespace n ON t.tgnamespace = n.oid\r\n  WHERE NOT t.tgisinternal\r\n  AND nt.nspname NOT IN ('information_schema', 'pg_catalog')\r\n  ORDER BY nt.nspname, ct.relname, t.tgname;\r\n$$;\r\n\r\n-- Función para obtener políticas RLS\r\nCREATE OR REPLACE FUNCTION get_policies()\r\nRETURNS TABLE (\r\n  schema_name text,\r\n  table_name text,\r\n  policy_name text,\r\n  policy_roles text[],\r\n  policy_cmd text,\r\n  policy_qual text,\r\n  policy_with_check text\r\n) \r\nLANGUAGE sql\r\nSECURITY DEFINER",
        "definition": "SELECT \r\n    n.nspname as schema_name,\r\n    c.relname as table_name,\r\n    pol.polname as policy_name,\r\n    CASE WHEN pol.polroles = '{0}' THEN ARRAY['PUBLIC']::text[]\r\n         ELSE ARRAY(SELECT rolname FROM pg_roles WHERE oid = ANY(pol.polroles))\r\n    END as policy_roles,\r\n    CASE pol.polcmd\r\n      WHEN 'r' THEN 'SELECT'\r\n      WHEN 'a' THEN 'INSERT'\r\n      WHEN 'w' THEN 'UPDATE'\r\n      WHEN 'd' THEN 'DELETE'\r\n      WHEN '*' THEN 'ALL'\r\n    END as policy_cmd,\r\n    pg_get_expr(pol.polqual, pol.polrelid) as policy_qual,\r\n    pg_get_expr(pol.polwithcheck, pol.polrelid) as policy_with_check\r\n  FROM pg_policy pol\r\n  JOIN pg_class c ON c.oid = pol.polrelid\r\n  JOIN pg_namespace n ON c.relnamespace = n.oid\r\n  WHERE n.nspname NOT IN ('information_schema', 'pg_catalog')\r\n  ORDER BY n.nspname, c.relname, pol.polname;"
      },
      {
        "name": "get_indexes",
        "parameters": "",
        "returnType": "TABLE (\r\n  schema_name text,\r\n  table_name text,\r\n  index_name text,\r\n  index_type text,\r\n  index_columns text,\r\n  is_unique boolean,\r\n  is_primary boolean,\r\n  index_size text\r\n) \r\nLANGUAGE sql\r\nSECURITY DEFINER\r\nAS $$\r\n  SELECT \r\n    n.nspname as schema_name,\r\n    t.relname as table_name,\r\n    i.relname as index_name,\r\n    am.amname as index_type,\r\n    array_to_string(array_agg(a.attname ORDER BY array_position(ix.indkey, a.attnum)), ', ') as index_columns,\r\n    ix.indisunique as is_unique,\r\n    ix.indisprimary as is_primary,\r\n    pg_size_pretty(pg_relation_size(i.oid)) as index_size\r\n  FROM pg_index ix\r\n  JOIN pg_class i ON i.oid = ix.indexrelid\r\n  JOIN pg_class t ON t.oid = ix.indrelid\r\n  JOIN pg_namespace n ON t.relnamespace = n.oid\r\n  JOIN pg_am am ON i.relam = am.oid\r\n  JOIN pg_attribute a ON a.attrelid = t.oid AND a.attnum = ANY(ix.indkey)\r\n  WHERE n.nspname NOT IN ('information_schema', 'pg_catalog')\r\n  GROUP BY n.nspname, t.relname, i.relname, am.amname, ix.indisunique, ix.indisprimary, i.oid\r\n  ORDER BY n.nspname, t.relname, i.relname;\r\n$$;\r\n\r\n-- Función para obtener secuencias\r\nCREATE OR REPLACE FUNCTION get_sequences()\r\nRETURNS TABLE (\r\n  sequence_schema text,\r\n  sequence_name text,\r\n  sequence_owner text,\r\n  data_type text,\r\n  start_value bigint,\r\n  minimum_value bigint,\r\n  maximum_value bigint,\r\n  increment bigint,\r\n  cycle_option text,\r\n  cache_size bigint\r\n) \r\nLANGUAGE sql\r\nSECURITY DEFINER\r\nAS $$\r\n  SELECT \r\n    n.nspname as sequence_schema,\r\n    s.relname as sequence_name,\r\n    pg_get_userbyid(s.relowner) as sequence_owner,\r\n    t.typname as data_type,\r\n    seq.start_value,\r\n    seq.minimum_value,\r\n    seq.maximum_value,\r\n    seq.increment,\r\n    seq.cycle_option,\r\n    seq.cache_size\r\n  FROM pg_class s\r\n  JOIN pg_namespace n ON s.relnamespace = n.oid\r\n  JOIN pg_sequence seq ON s.oid = seq.seqrelid\r\n  JOIN pg_type t ON seq.seqtypid = t.oid\r\n  WHERE s.relkind = 'S'\r\n  AND n.nspname NOT IN ('information_schema', 'pg_catalog')\r\n  ORDER BY n.nspname, s.relname;\r\n$$;\r\n\r\n-- Función para obtener vistas\r\nCREATE OR REPLACE FUNCTION get_views()\r\nRETURNS TABLE (\r\n  view_schema text,\r\n  view_name text,\r\n  view_owner text,\r\n  view_definition text,\r\n  is_updatable text,\r\n  is_insertable_into text,\r\n  is_trigger_updatable text\r\n) \r\nLANGUAGE sql\r\nSECURITY DEFINER\r\nAS $$\r\n  SELECT \r\n    v.table_schema as view_schema,\r\n    v.table_name as view_name,\r\n    pg_get_userbyid(c.relowner) as view_owner,\r\n    v.view_definition,\r\n    v.is_updatable,\r\n    v.is_insertable_into,\r\n    v.is_trigger_updatable\r\n  FROM information_schema.views v\r\n  JOIN pg_class c ON c.relname = v.table_name\r\n  JOIN pg_namespace n ON n.nspname = v.table_schema AND c.relnamespace = n.oid\r\n  WHERE v.table_schema NOT IN ('information_schema', 'pg_catalog')\r\n  ORDER BY v.table_schema, v.table_name;\r\n$$;\r\n\r\n-- Función para obtener extensiones\r\nCREATE OR REPLACE FUNCTION get_extensions()\r\nRETURNS TABLE (\r\n  extension_name text,\r\n  extension_version text,\r\n  extension_schema text,\r\n  extension_description text\r\n) \r\nLANGUAGE sql\r\nSECURITY DEFINER\r\nAS $$\r\n  SELECT \r\n    e.extname as extension_name,\r\n    e.extversion as extension_version,\r\n    n.nspname as extension_schema,\r\n    d.description as extension_description\r\n  FROM pg_extension e\r\n  JOIN pg_namespace n ON e.extnamespace = n.oid\r\n  LEFT JOIN pg_description d ON d.objoid = e.oid AND d.objsubid = 0\r\n  ORDER BY e.extname;\r\n$$;\r\n\r\n-- Función para obtener roles\r\nCREATE OR REPLACE FUNCTION get_roles()\r\nRETURNS TABLE (\r\n  role_name text,\r\n  role_type text,\r\n  can_login boolean,\r\n  can_create_role boolean,\r\n  can_create_db boolean,\r\n  can_init_repl boolean,\r\n  can_bypass_rls boolean,\r\n  connection_limit integer,\r\n  valid_until timestamp with time zone,\r\n  member_of text[]\r\n) \r\nLANGUAGE sql\r\nSECURITY DEFINER",
        "definition": "SELECT \r\n    r.rolname as role_name,\r\n    CASE r.rolsuper\r\n      WHEN true THEN 'superuser'\r\n      WHEN false THEN 'normal'\r\n    END as role_type,\r\n    r.rolcanlogin as can_login,\r\n    r.rolcreaterole as can_create_role,\r\n    r.rolcreatedb as can_create_db,\r\n    r.rolreplication as can_init_repl,\r\n    r.rolbypassrls as can_bypass_rls,\r\n    r.rolconnlimit as connection_limit,\r\n    r.rolvaliduntil as valid_until,\r\n    ARRAY(\r\n      SELECT m.rolname \r\n      FROM pg_auth_members am\r\n      JOIN pg_roles m ON m.oid = am.member\r\n      WHERE am.roleid = r.oid\r\n    ) as member_of\r\n  FROM pg_roles r\r\n  WHERE r.rolname NOT LIKE 'pg_%'\r\n  ORDER BY r.rolname;"
      },
      {
        "name": "update_outlet_products_updated_at",
        "parameters": "",
        "returnType": "trigger AS $$\r\nBEGIN\r\n  NEW.updated_at = NOW();\r\n  RETURN NEW;\r\nEND;\r\n$$ LANGUAGE plpgsql;\r\n\r\n-- 6. Trigger para actualizar updated_at\r\nDROP TRIGGER IF EXISTS update_outlet_products_updated_at ON outlet_products;\r\nCREATE TRIGGER update_outlet_products_updated_at\r\n  BEFORE UPDATE ON outlet_products\r\n  FOR EACH ROW\r\n  EXECUTE FUNCTION update_outlet_products_updated_at();\r\n\r\n-- 7. Función para calcular automáticamente el porcentaje de descuento\r\nCREATE OR REPLACE FUNCTION calculate_discount_percentage()\r\nRETURNS trigger AS $$\r\nBEGIN\r\n  IF NEW.original_price > 0 THEN\r\n    NEW.discount_percentage = ROUND(((NEW.original_price - NEW.outlet_price) / NEW.original_price) * 100);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$$ LANGUAGE plpgsql;\r\n\r\n-- 8. Trigger para calcular automáticamente el descuento\r\nDROP TRIGGER IF EXISTS calculate_discount_percentage_trigger ON outlet_products;\r\nCREATE TRIGGER calculate_discount_percentage_trigger\r\n  BEFORE INSERT OR UPDATE ON outlet_products\r\n  FOR EACH ROW\r\n  EXECUTE FUNCTION calculate_discount_percentage();\r\n\r\n-- 9. Función para validar que el precio de outlet sea menor que el original\r\nCREATE OR REPLACE FUNCTION validate_outlet_price()\r\nRETURNS trigger",
        "definition": "BEGIN\r\n  IF NEW.outlet_price >= NEW.original_price THEN\r\n    RAISE EXCEPTION 'El precio de outlet debe ser menor que el precio original';\r\n  END IF;\r\n  RETURN NEW;\r\nEND;"
      },
      {
        "name": "detect_device_type",
        "parameters": "user_agent_string TEXT",
        "returnType": "TEXT AS $$\nBEGIN\n    IF user_agent_string IS NULL THEN\n        RETURN 'unknown';\n    END IF;\n    \n    -- Mobile detection\n    IF user_agent_string ~* '(iPhone|iPod|Android|BlackBerry|Windows Phone|Mobile)' THEN\n        RETURN 'mobile';\n    END IF;\n    \n    -- Tablet detection\n    IF user_agent_string ~* '(iPad|Tablet)' THEN\n        RETURN 'tablet';\n    END IF;\n    \n    -- Desktop (default)\n    RETURN 'desktop';\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Trigger to auto-detect device type\nCREATE OR REPLACE FUNCTION set_device_type()\nRETURNS TRIGGER",
        "definition": "BEGIN\n    IF NEW.device_type IS NULL AND NEW.user_agent IS NOT NULL THEN\n        NEW.device_type := detect_device_type(NEW.user_agent);\n    END IF;\n    \n    NEW.updated_at := NOW();\n    RETURN NEW;\nEND;"
      },
      {
        "name": "detect_device_type",
        "parameters": "user_agent TEXT",
        "returnType": "TEXT AS $$\nBEGIN\n  IF user_agent IS NULL THEN\n    RETURN 'unknown';\n  END IF;\n  \n  IF user_agent ILIKE '%mobile%' OR user_agent ILIKE '%android%' OR user_agent ILIKE '%iphone%' THEN\n    RETURN 'mobile';\n  ELSIF user_agent ILIKE '%tablet%' OR user_agent ILIKE '%ipad%' THEN\n    RETURN 'tablet';\n  ELSE\n    RETURN 'desktop';\n  END IF;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Trigger para auto-detectar device_type si no se proporciona\nCREATE OR REPLACE FUNCTION set_device_type()\nRETURNS TRIGGER",
        "definition": "BEGIN\n  IF NEW.device_type IS NULL AND NEW.user_agent IS NOT NULL THEN\n    NEW.device_type := detect_device_type(NEW.user_agent);\n  END IF;\n  RETURN NEW;\nEND;"
      },
      {
        "name": "update_tracking_conversions_updated_at",
        "parameters": "",
        "returnType": "TRIGGER",
        "definition": "BEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;"
      },
      {
        "name": "update_tracking_conversions_updated_at",
        "parameters": "",
        "returnType": "TRIGGER",
        "definition": "BEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;"
      },
      {
        "name": "generate_pixel_id",
        "parameters": "",
        "returnType": "TEXT AS $$\nBEGIN\n    RETURN 'px_' || substr(md5(random()::text), 1, 10);\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Trigger para generar pixel_id automáticamente\nCREATE OR REPLACE FUNCTION set_pixel_id()\nRETURNS TRIGGER AS $$\nBEGIN\n    IF NEW.pixel_id IS NULL OR NEW.pixel_id = '' THEN\n        NEW.pixel_id := generate_pixel_id();\n        -- Asegurar que sea único\n        WHILE EXISTS (SELECT 1 FROM tracking_pixels WHERE pixel_id = NEW.pixel_id) LOOP\n            NEW.pixel_id := generate_pixel_id();\n        END LOOP;\n    END IF;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER trigger_set_pixel_id\n    BEFORE INSERT ON tracking_pixels\n    FOR EACH ROW\n    EXECUTE FUNCTION set_pixel_id();\n\n-- Trigger para actualizar updated_at\nCREATE OR REPLACE FUNCTION update_tracking_pixels_updated_at()\nRETURNS TRIGGER",
        "definition": "BEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;"
      },
      {
        "name": "increment_product_view",
        "parameters": "p_product_id UUID",
        "returnType": "VOID AS $$\nBEGIN\n  INSERT INTO product_stats (product_id, views)\n  VALUES (p_product_id, 1)\n  ON CONFLICT (product_id) DO UPDATE\n  SET views = product_stats.views + 1,\n      last_updated = CURRENT_TIMESTAMP;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Función para incrementar clics de producto\nCREATE OR REPLACE FUNCTION increment_product_click(p_product_id UUID)\nRETURNS VOID AS $$\nBEGIN\n  INSERT INTO product_stats (product_id, clicks)\n  VALUES (p_product_id, 1)\n  ON CONFLICT (product_id) DO UPDATE\n  SET clicks = product_stats.clicks + 1,\n      last_updated = CURRENT_TIMESTAMP;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Función para incrementar conversiones de producto\nCREATE OR REPLACE FUNCTION increment_product_conversion(p_product_id UUID)\nRETURNS VOID AS $$\nBEGIN\n  INSERT INTO product_stats (product_id, conversions)\n  VALUES (p_product_id, 1)\n  ON CONFLICT (product_id) DO UPDATE\n  SET conversions = product_stats.conversions + 1,\n      last_updated = CURRENT_TIMESTAMP;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Función para actualizar el timestamp de actualización\nCREATE OR REPLACE FUNCTION update_featured_products_updated_at()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Trigger para actualizar el timestamp de actualización\nDROP TRIGGER IF EXISTS update_featured_products_updated_at ON featured_products;\nCREATE TRIGGER update_featured_products_updated_at\nBEFORE UPDATE ON featured_products\nFOR EACH ROW\nEXECUTE FUNCTION update_featured_products_updated_at();\n\n-- Trigger para actualizar el campo updated_at\nCREATE OR REPLACE FUNCTION update_modified_column()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = CURRENT_TIMESTAMP;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER update_featured_products_modtime\nBEFORE UPDATE ON featured_products\nFOR EACH ROW\nEXECUTE FUNCTION update_modified_column();\n\n-- Trigger para actualizar el estado del producto basado en las fechas\nCREATE OR REPLACE FUNCTION update_product_status()\nRETURNS TRIGGER",
        "definition": "BEGIN\n  -- Si la fecha de fin ha pasado, marcar como expirado\n  IF NEW.end_date IS NOT NULL AND NEW.end_date < CURRENT_TIMESTAMP THEN\n    NEW.status = 'expired';\n  END IF;\n  RETURN NEW;\nEND;"
      },
      {
        "name": "add_store_utm_exception",
        "parameters": "p_store_id UUID,\n  p_reason TEXT DEFAULT NULL,\n  p_affiliate_program TEXT DEFAULT NULL,\n  p_affiliate_id TEXT DEFAULT NULL,\n  p_priority INTEGER DEFAULT 1",
        "returnType": "UUID AS $$\nDECLARE\n  v_exception_id UUID;\n  v_store_record RECORD;\nBEGIN\n  -- Obtener datos de la tienda\n  SELECT s.*, p.id as owner_id \n  INTO v_store_record\n  FROM stores s\n  LEFT JOIN profiles p ON s.owner_id = p.id\n  WHERE s.id = p_store_id;\n  \n  IF NOT FOUND THEN\n    RAISE EXCEPTION 'Store not found: %', p_store_id;\n  END IF;\n  \n  -- Insertar excepción\n  INSERT INTO utm_tracking_exceptions (\n    store_id,\n    owner_id,\n    store_name,\n    store_slug,\n    domain,\n    reason,\n    affiliate_program,\n    affiliate_id,\n    priority,\n    is_active\n  ) VALUES (\n    p_store_id,\n    v_store_record.owner_id,\n    v_store_record.name,\n    v_store_record.slug,\n    COALESCE(\n      -- Extraer dominio de website si existe\n      CASE \n        WHEN v_store_record.website IS NOT NULL \n        THEN regexp_replace(\n          regexp_replace(v_store_record.website, '^https?://', ''), \n          '^www\\.', ''\n        )\n        ELSE NULL\n      END,\n      'unknown-domain.com'\n    ),\n    p_reason,\n    p_affiliate_program,\n    p_affiliate_id,\n    p_priority,\n    true\n  ) RETURNING id INTO v_exception_id;\n  \n  RETURN v_exception_id;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Función para verificar si una tienda debe ser excluida\nCREATE OR REPLACE FUNCTION should_exclude_utm_tracking(\n  p_store_id UUID DEFAULT NULL,\n  p_domain TEXT DEFAULT NULL,\n  p_owner_id UUID DEFAULT NULL\n) RETURNS TABLE(\n  should_exclude BOOLEAN,\n  exception_id UUID,\n  reason TEXT,\n  affiliate_program TEXT,\n  affiliate_id TEXT\n)",
        "definition": "BEGIN\n  RETURN QUERY\n  SELECT \n    true as should_exclude,\n    ute.id as exception_id,\n    ute.reason,\n    ute.affiliate_program,\n    ute.affiliate_id\n  FROM utm_tracking_exceptions ute\n  WHERE ute.is_active = true\n    AND (\n      -- Coincidencia exacta por store_id (máxima prioridad)\n      (p_store_id IS NOT NULL AND ute.store_id = p_store_id)\n      OR\n      -- Coincidencia por owner_id\n      (p_owner_id IS NOT NULL AND ute.owner_id = p_owner_id)\n      OR\n      -- Coincidencia por dominio\n      (p_domain IS NOT NULL AND p_domain ILIKE '%' || ute.domain || '%')\n    )\n  ORDER BY \n    -- Priorizar coincidencias exactas\n    CASE \n      WHEN ute.store_id = p_store_id THEN 1\n      WHEN ute.owner_id = p_owner_id THEN 2\n      WHEN p_domain ILIKE '%' || ute.domain || '%' THEN 3\n      ELSE 4\n    END,\n    ute.priority ASC\n  LIMIT 1;\n  \n  -- Si no hay coincidencias, no excluir\n  IF NOT FOUND THEN\n    RETURN QUERY SELECT false, NULL::UUID, NULL::TEXT, NULL::TEXT, NULL::TEXT;\n  END IF;\nEND;"
      },
      {
        "name": "update_payment_reminders_updated_at",
        "parameters": "",
        "returnType": "TRIGGER AS $$\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER payment_reminders_updated_at\n  BEFORE UPDATE ON payment_reminders\n  FOR EACH ROW\n  EXECUTE FUNCTION update_payment_reminders_updated_at();\n\n-- Generate invoice numbers automatically\nCREATE OR REPLACE FUNCTION generate_invoice_number()\nRETURNS TRIGGER",
        "definition": "BEGIN\n  IF NEW.invoice_number IS NULL THEN\n    NEW.invoice_number = 'INV-' || TO_CHAR(NOW(), 'YYYY') || '-' || LPAD(nextval('invoice_sequence')::TEXT, 6, '0');\n  END IF;\n  RETURN NEW;\nEND;"
      },
      {
        "name": "update_outlet_products_updated_at",
        "parameters": "",
        "returnType": "trigger AS $$\r\nBEGIN\r\n  NEW.updated_at = NOW();\r\n  RETURN NEW;\r\nEND;\r\n$$ LANGUAGE plpgsql;\r\n\r\n-- 11. Trigger para actualizar updated_at\r\nDROP TRIGGER IF EXISTS update_outlet_products_updated_at ON outlet_products;\r\nCREATE TRIGGER update_outlet_products_updated_at\r\n  BEFORE UPDATE ON outlet_products\r\n  FOR EACH ROW\r\n  EXECUTE FUNCTION update_outlet_products_updated_at();\r\n\r\n-- 12. Función para calcular automáticamente el porcentaje de descuento\r\nCREATE OR REPLACE FUNCTION calculate_discount_percentage()\r\nRETURNS trigger",
        "definition": "BEGIN\r\n  IF NEW.original_price > 0 THEN\r\n    NEW.discount_percentage = ROUND(((NEW.original_price - NEW.outlet_price) / NEW.original_price) * 100);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;"
      },
      {
        "name": "has_active_subscription",
        "parameters": "p_user_id UUID",
        "returnType": "BOOLEAN AS $$\nDECLARE\n  v_has_subscription BOOLEAN;\nBEGIN\n  SELECT EXISTS (\n    SELECT 1 FROM user_subscriptions\n    WHERE user_id = p_user_id\n    AND status = 'active'\n    AND current_period_end > CURRENT_TIMESTAMP\n  ) INTO v_has_subscription;\n  \n  RETURN v_has_subscription;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Crear función para obtener el límite de tiendas según la suscripción\nCREATE OR REPLACE FUNCTION get_store_limit(p_user_id UUID)\nRETURNS INTEGER",
        "definition": "DECLARE\n  v_plan_features JSONB;\n  v_store_limit INTEGER;\nBEGIN\n  -- Obtener las características del plan\n  SELECT sp.features INTO v_plan_features\n  FROM user_subscriptions us\n  JOIN subscription_plans sp ON us.plan_id = sp.id\n  WHERE us.user_id = p_user_id\n  AND us.status = 'active'\n  AND us.current_period_end > CURRENT_TIMESTAMP\n  LIMIT 1;\n  \n  -- Si no hay suscripción activa, devolver 0\n  IF v_plan_features IS NULL THEN\n    RETURN 0;\n  END IF;\n  \n  -- Extraer el límite de tiendas de las características\n  IF v_plan_features::text LIKE '%tiendas ilimitadas%' THEN\n    RETURN -1; -- -1 significa ilimitado\n  ELSIF v_plan_features::text LIKE '%3 tiendas%' THEN\n    RETURN 3;\n  ELSIF v_plan_features::text LIKE '%1 tienda%' THEN\n    RETURN 1;\n  ELSE\n    RETURN 0;\n  END IF;\nEND;"
      }
    ],
    "triggers": [
      {
        "name": "update_outlet_products_updated_at",
        "definition": "BEFORE UPDATE",
        "table": "outlet_products"
      },
      {
        "name": "calculate_discount_percentage_trigger",
        "definition": "BEFORE INSERT OR UPDATE",
        "table": "outlet_products"
      },
      {
        "name": "validate_outlet_price_trigger",
        "definition": "BEFORE INSERT OR UPDATE",
        "table": "outlet_products"
      },
      {
        "name": "trigger_set_pixel_id",
        "definition": "BEFORE INSERT",
        "table": "tracking_pixels"
      },
      {
        "name": "update_featured_products_updated_at",
        "definition": "BEFORE UPDATE",
        "table": "featured_products"
      },
      {
        "name": "update_featured_products_modtime",
        "definition": "BEFORE UPDATE",
        "table": "featured_products"
      },
      {
        "name": "check_product_expiration",
        "definition": "BEFORE INSERT OR UPDATE",
        "table": "featured_products"
      },
      {
        "name": "to",
        "definition": "update updated_at\nCREATE OR REPLACE FUNCTION update_payment_reminders_updated_at()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER payment_reminders_updated_at\n  BEFORE UPDATE",
        "table": "payment_reminders"
      },
      {
        "name": "update_outlet_products_updated_at",
        "definition": "BEFORE UPDATE",
        "table": "outlet_products"
      },
      {
        "name": "calculate_discount_percentage_trigger",
        "definition": "BEFORE INSERT OR UPDATE",
        "table": "outlet_products"
      }
    ],
    "policies": [
      {
        "name": "featured_products_select_policy ON featured_products\n  FOR SELECT USING (status = 'active');\n\n-- Política para permitir a los propietarios de tiendas gestionar sus productos\nCREATE POLICY featured_products_store_owner_policy ON featured_products\n  USING (\n    store_id IN (\n      SELECT id FROM stores WHERE user_id = auth.uid()\n    )\n  );\n\n-- Política para permitir a los administradores gestionar todos los productos\nCREATE POLICY featured_products_admin_policy",
        "table": "featured_products\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles WHERE id = auth.uid() AND role = 'admin'\n    )\n  );\n\n-- Añadir datos de ejemplo\nINSERT INTO featured_products (\n  store_id, \n  name, \n  description, \n  price, \n  sale_price, \n  category, \n  is_new, \n  is_featured, \n  is_on_sale, \n  stock_quantity, \n  status\n)\nSELECT \n  id as store_id,\n  'Producto de ejemplo ' || s.name,\n  'Este es un producto de ejemplo para la tienda ' || s.name,\n  ROUND((RANDOM() * 100)::numeric, 2),\n  CASE WHEN RANDOM() > 0.5 THEN ROUND((RANDOM() * 80)::numeric, 2) ELSE NULL END,\n  (ARRAY['Electrónica', 'Moda', 'Hogar', 'Alimentación', 'Belleza'])[floor(random() * 5 + 1)],\n  RANDOM() > 0.7,\n  RANDOM() > 0.7,\n  RANDOM() > 0.5,\n  floor(random() * 100),\n  'active'\nFROM stores s\nWHERE s.status = 'approved'\nLIMIT 20;"
      },
      {
        "name": "admin_all_products ON products\n  FOR ALL\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM profiles\n      WHERE profiles.id = auth.uid()\n      AND profiles.role = 'admin'\n    )\n  );\n\n-- Política para que los comerciantes puedan ver sus propios productos\nCREATE POLICY merchant_select_own_products ON products\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM stores\n      WHERE stores.id = products.store_id\n      AND stores.owner_id = auth.uid()\n    )\n  );\n\n-- Política para que los comerciantes puedan insertar productos en sus tiendas\nCREATE POLICY merchant_insert_own_products ON products\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM stores\n      WHERE stores.id = products.store_id\n      AND stores.owner_id = auth.uid()\n    )\n  );\n\n-- Política para que los comerciantes puedan actualizar sus propios productos\nCREATE POLICY merchant_update_own_products ON products\n  FOR UPDATE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM stores\n      WHERE stores.id = products.store_id\n      AND stores.owner_id = auth.uid()\n    )\n  );\n\n-- Política para que los comerciantes puedan eliminar sus propios productos\nCREATE POLICY merchant_delete_own_products ON products\n  FOR DELETE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM stores\n      WHERE stores.id = products.store_id\n      AND stores.owner_id = auth.uid()\n    )\n  );\n\n-- Política para que todos los usuarios puedan ver productos activos\nCREATE POLICY public_select_active_products",
        "table": "products\n  FOR SELECT\n  TO anon, authenticated\n  USING (\n    status = 'active'\n  );"
      },
      {
        "name": "admin_all_products ON products\r\n  FOR ALL\r\n  TO authenticated\r\n  USING (\r\n    EXISTS (\r\n      SELECT 1 FROM profiles\r\n      WHERE profiles.id = auth.uid()\r\n      AND profiles.role = 'admin'\r\n    )\r\n  );\r\n\r\nDROP POLICY IF EXISTS merchant_select_own_products ON products;\r\nCREATE POLICY merchant_select_own_products ON products\r\n  FOR SELECT\r\n  TO authenticated\r\n  USING (\r\n    EXISTS (\r\n      SELECT 1 FROM stores\r\n      WHERE stores.id = products.store_id\r\n      AND stores.owner_id = auth.uid()\r\n    )\r\n  );\r\n\r\nDROP POLICY IF EXISTS merchant_insert_own_products ON products;\r\nCREATE POLICY merchant_insert_own_products ON products\r\n  FOR INSERT\r\n  TO authenticated\r\n  WITH CHECK (\r\n    EXISTS (\r\n      SELECT 1 FROM stores\r\n      WHERE stores.id = products.store_id\r\n      AND stores.owner_id = auth.uid()\r\n    )\r\n  );\r\n\r\nDROP POLICY IF EXISTS merchant_update_own_products ON products;\r\nCREATE POLICY merchant_update_own_products ON products\r\n  FOR UPDATE\r\n  TO authenticated\r\n  USING (\r\n    EXISTS (\r\n      SELECT 1 FROM stores\r\n      WHERE stores.id = products.store_id\r\n      AND stores.owner_id = auth.uid()\r\n    )\r\n  );\r\n\r\nDROP POLICY IF EXISTS merchant_delete_own_products ON products;\r\nCREATE POLICY merchant_delete_own_products ON products\r\n  FOR DELETE\r\n  TO authenticated\r\n  USING (\r\n    EXISTS (\r\n      SELECT 1 FROM stores\r\n      WHERE stores.id = products.store_id\r\n      AND stores.owner_id = auth.uid()\r\n    )\r\n  );\r\n\r\nDROP POLICY IF EXISTS public_select_active_products ON products;\r\nCREATE POLICY public_select_active_products",
        "table": "products\r\n  FOR SELECT\r\n  TO anon, authenticated\r\n  USING (\r\n    status = 'active'\r\n  );\r\n\r\n-- 8. Habilitar RLS en outlet_products\r\nALTER TABLE outlet_products ENABLE ROW LEVEL SECURITY;\r\n\r\n-- 9. Políticas para outlet_products\r\nDROP POLICY IF EXISTS"
      },
      {
        "name": "store_images_select_policy ON store_images\n  FOR SELECT USING (\n    auth.uid() IN (\n      SELECT owner_id FROM stores WHERE id = store_id\n    ) OR \n    auth.uid() IN (\n      SELECT id FROM profiles WHERE role = 'admin'\n    ) OR\n    TRUE  -- Permitir lectura pública de imágenes\n  );\n\n-- Política para permitir a los propietarios de tiendas insertar imágenes\nCREATE POLICY store_images_insert_policy ON store_images\n  FOR INSERT WITH CHECK (\n    auth.uid() IN (\n      SELECT owner_id FROM stores WHERE id = store_id\n    ) OR \n    auth.uid() IN (\n      SELECT id FROM profiles WHERE role = 'admin'\n    )\n  );\n\n-- Política para permitir a los propietarios de tiendas actualizar sus imágenes\nCREATE POLICY store_images_update_policy ON store_images\n  FOR UPDATE USING (\n    auth.uid() IN (\n      SELECT owner_id FROM stores WHERE id = store_id\n    ) OR \n    auth.uid() IN (\n      SELECT id FROM profiles WHERE role = 'admin'\n    )\n  );\n\n-- Política para permitir a los propietarios de tiendas eliminar sus imágenes\nCREATE POLICY store_images_delete_policy",
        "table": "store_images\n  FOR DELETE USING (\n    auth.uid() IN (\n      SELECT owner_id FROM stores WHERE id = store_id\n    ) OR \n    auth.uid() IN (\n      SELECT id FROM profiles WHERE role = 'admin'\n    )\n  );"
      }
    ],
    "indexes": [
      {
        "name": "idx_featured_products_store_id",
        "table": "featured_products(store_id);"
      },
      {
        "name": "idx_featured_products_category",
        "table": "featured_products(category);"
      },
      {
        "name": "idx_featured_products_status",
        "table": "featured_products(status);"
      },
      {
        "name": "idx_featured_products_is_featured",
        "table": "featured_products(is_featured);"
      },
      {
        "name": "idx_featured_products_is_new",
        "table": "featured_products(is_new);"
      },
      {
        "name": "idx_featured_products_is_on_sale",
        "table": "featured_products(is_on_sale);"
      },
      {
        "name": "idx_outlet_products_store_id",
        "table": "outlet_products(store_id);"
      },
      {
        "name": "idx_outlet_products_is_active",
        "table": "outlet_products(is_active);"
      },
      {
        "name": "idx_outlet_products_is_featured",
        "table": "outlet_products(is_featured);"
      },
      {
        "name": "idx_outlet_products_discount_percentage",
        "table": "outlet_products(discount_percentage"
      },
      {
        "name": "idx_outlet_products_created_at",
        "table": "outlet_products(created_at"
      },
      {
        "name": "idx_outlet_products_rating",
        "table": "outlet_products(rating"
      },
      {
        "name": "idx_tracking_clicks_clicked_at",
        "table": "tracking_clicks(clicked_at);"
      },
      {
        "name": "idx_tracking_pixels_is_active",
        "table": "tracking_pixels(is_active);"
      },
      {
        "name": "idx_tracking_pixels_platform",
        "table": "tracking_pixels(platform);"
      },
      {
        "name": "idx_featured_products_store_id",
        "table": "featured_products(store_id);"
      },
      {
        "name": "idx_featured_products_is_featured",
        "table": "featured_products(is_featured);"
      },
      {
        "name": "idx_featured_products_status",
        "table": "featured_products(status);"
      },
      {
        "name": "idx_tracking_clicks_clicked_at",
        "table": "tracking_clicks(clicked_at);"
      },
      {
        "name": "idx_outlet_products_store_id",
        "table": "outlet_products(store_id);"
      },
      {
        "name": "idx_outlet_products_is_active",
        "table": "outlet_products(is_active);"
      },
      {
        "name": "idx_outlet_products_is_featured",
        "table": "outlet_products(is_featured);"
      },
      {
        "name": "idx_outlet_products_discount_percentage",
        "table": "outlet_products(discount_percentage"
      },
      {
        "name": "idx_outlet_products_created_at",
        "table": "outlet_products(created_at"
      },
      {
        "name": "idx_store_images_store_id",
        "table": "store_images(store_id);"
      }
    ],
    "sequences": [
      {
        "name": "for"
      },
      {
        "name": "invoice_sequence"
      }
    ],
    "views": [],
    "extensions": [
      {
        "name": "\"uuid-ossp\""
      },
      {
        "name": "\"uuid-ossp\""
      }
    ]
  },
  "different": {
    "tables": [],
    "functions": [],
    "triggers": [],
    "policies": [],
    "indexes": [],
    "sequences": [],
    "views": [],
    "extensions": []
  }
}